package fm.qingting.qtradio.model;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.os.Build;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.os.Message;
import android.text.TextUtils;
import android.util.Log;
import android.widget.Toast;
import com.umeng.analytics.MobclickAgent;
import com.umeng.message.PushAgent;
import com.umeng.message.UmengRegistrar;
import fm.qingting.download.HttpDownloadHelper;
import fm.qingting.framework.data.DataError;
import fm.qingting.framework.data.DataManager;
import fm.qingting.framework.data.IResultRecvHandler;
import fm.qingting.framework.data.IResultToken;
import fm.qingting.framework.data.Result;
import fm.qingting.framework.event.IEventHandler;
import fm.qingting.framework.utils.MobileState;
import fm.qingting.qtradio.abtest.ABTest;
import fm.qingting.qtradio.abtest.ABTestConfig;
import fm.qingting.qtradio.ad.AdPos;
import fm.qingting.qtradio.fm.PlayerAgent;
import fm.qingting.qtradio.helper.ChannelHelper;
import fm.qingting.qtradio.helper.PodcasterHelper;
import fm.qingting.qtradio.helper.ProgramHelper;
import fm.qingting.qtradio.logger.QTLogger;
import fm.qingting.qtradio.notification.INotificationServiceControl;
import fm.qingting.qtradio.playlist.PlayListManager;
import fm.qingting.qtradio.pushcontent.ChannelTimingDB;
import fm.qingting.qtradio.pushcontent.TimeBean;
import fm.qingting.qtradio.room.ExitAction;
import fm.qingting.qtradio.room.Room;
import fm.qingting.qtradio.room.RoomManager;
import fm.qingting.qtradio.room.SnsInfo;
import fm.qingting.qtradio.room.UserInfo;
import fm.qingting.qtradio.search.SearchNode;
import fm.qingting.qtradio.social.CloudCenter;
import fm.qingting.qtradio.social.UserProfile;
import fm.qingting.utils.AppInfo;
import fm.qingting.utils.DeviceInfo;
import fm.qingting.utils.LifeTime;
import fm.qingting.utils.QTMSGManage;
import fm.qingting.utils.RangeRandom;
import fm.qingting.utils.ScreenType;
import fm.qingting.utils.ThirdAdv;
import fm.qingting.utils.ThirdTracker;
import java.lang.ref.WeakReference;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class InfoManager
  implements IResultRecvHandler, IEventHandler
{
  private static int NOVEL_PAGE_SIZE;
  private static InfoManager _instance = null;
  private static HandlerThread mLoadThread;
  private static HandlerThread t;
  private int AD_MIN_INTERVAL = 300;
  private int ERROR_PROGRAM_CNT = 5;
  private int PODCASTER_RECENT_LIMIT_SIZE = 5;
  private int SEARCH_PAGE_SIZE = 15;
  private QTADLocation advLocation;
  private String allowDownloadMusic = null;
  private boolean autoGenerateDataBase = false;
  private int bootstrapCnt = 0;
  private int bootstrapTime = 0;
  public String chatServer = "http://chat.qingting.fm/";
  private String currLiveRoomId = null;
  private QTLocation currentLocation;
  private DataStoreHandler dataStoreHandler = new DataStoreHandler(t.getLooper());
  private int defaultCollectionChannelId = 0;
  private int defaultSpecialTopicId = 0;
  private boolean enableADVLocation = false;
  private String enableBarrage = null;
  Map<Integer, H5Bean> h5_category = null;
  Map<Integer, H5Bean> h5_channel = null;
  Map<Integer, H5Bean> h5_podcaster = null;
  Map<Integer, H5Bean> h5_specialTopic = null;
  private int jdClick = 0;
  private int jdShow = 1;
  private int linkDuration = 10;
  List<Integer> liveChannel = null;
  private boolean mAchilles = false;
  private int mAchillesIndex = 0;
  private List<Integer> mAchillesLstPercents;
  private List<String> mAchillesLstUrls;
  private String mAddGroupSlogan = "加入节目官方群，和小伙伴们边听边聊吧！";
  private boolean mAddLocalRecommendInfo = false;
  private PushAgent mAgent;
  private String mAppleDesc = "";
  private String mAppleImage = "";
  private String mAppleUrl = "";
  private long mAthenaLife = 259200L;
  private int mAudioQualitySetting = 1;
  private int mAutoReserveMinDuration = 120;
  private boolean mAutoSeek = true;
  private boolean mBindRecommendShare = false;
  public Map<String, TimeBean> mChannelsTiming;
  private String mChatroom;
  private boolean mChinaUnicomZone = true;
  private Context mContext;
  private final int mDelayLoadFrontPageFromDB = 3000;
  private String mDeviceId;
  private Handler mDispatchHandler = new DispatchHandler(Looper.getMainLooper());
  private boolean mEnabelH5 = false;
  private boolean mEnabelProgramABTest = false;
  private boolean mEnableAirWave = false;
  private boolean mEnableAirWaveCity = false;
  private int mEnableAirWaveClick = 0;
  private int mEnableAirWaveShow = 0;
  private boolean mEnableAudioAdv = true;
  private boolean mEnableChannelPaging = false;
  private boolean mEnableCustomCategory = false;
  private boolean mEnableGame = false;
  private String mEnableGroup = "";
  private boolean mEnableIRE = true;
  private boolean mEnableJDCity = true;
  private boolean mEnableNavigation = true;
  private boolean mEnableNewCDN = false;
  private boolean mEnablePingAN = false;
  private boolean mEnableRecShare = false;
  private boolean mEnableSeek = true;
  private boolean mEnableSetDNS = false;
  private boolean mEnableTBMagic = false;
  private boolean mEnableTaobaoAudioAdv = false;
  private boolean mEnableWoQt = true;
  private boolean mForceLogin = false;
  private boolean mFrontCollection = false;
  private boolean mHasInit = false;
  private boolean mHasJdAd = true;
  private boolean mHasSellApp = false;
  private boolean mInBackground = false;
  private boolean mInstallApple = false;
  private int mJdAdPosition = 4;
  private long mLastPlayAdvertisement = 0L;
  private String mLiveRoomBlack = "";
  private LoadDataHandler mLoadHandler = new LoadDataHandler(mLoadThread.getLooper());
  private List<Integer> mLstAdWhite = null;
  private List<GameBean> mLstGameBean = new ArrayList();
  private String mMarsRoomId = "86000";
  private int mMaxWordsInLiveRoom = 70;
  private int mMinReserveThreshold = 60;
  private boolean mMobileAlert = false;
  private boolean mMobilePlay = true;
  private boolean mNeedWrite = false;
  private String mNewCDN = "qtmedia.b0.upaiyun.com";
  private int mNewCheckin = 0;
  private boolean mNewNovelPage = true;
  private List<String> mPushToWeiboGroup;
  private List<String> mPushToWeiboId;
  public boolean mQuitAfterPlay = false;
  private RootNode mRootNode = new RootNode();
  private boolean mSellApps = false;
  private String mSellAppsInfo = null;
  private String mSellAppsPackage = null;
  private boolean mSettingMobileNetwork = false;
  private String mShareTag = "";
  private int mShowAdvertisementRatio = 0;
  private boolean mShowRecommendApp = false;
  private boolean mStatusPage = true;
  private int mTaobaoAdvInterval = 1200;
  private ChannelTimingDB mTimingDB;
  private boolean mTopHisotory = false;
  private boolean mUseIpInMedia = false;
  private boolean mUsePlayCache = true;
  private boolean mUsedOnlyInWifi = false;
  private UserProfile mUserProfile = new UserProfile();
  private String mUserguidRecommend = "";
  Map<Integer, String> mall = null;
  private Map<String, List<INodeEventListener>> mapNodeEventListeners = new HashMap();
  Map<Integer, ProgramABTestBean> mapProgramABTest = null;
  private Map<String, List<ISubscribeEventListener>> mapSubscribeEventListeners = new HashMap();
  private long msgSeq = 0L;
  Map<Integer, String> qtimeConfig = null;
  Map<Integer, String> qtimeEntry = null;
  Map<Integer, String> qtimeEntryType = null;
  private String ruleText = null;
  private List<WeakReference<ISubscribeEventListener>> viewTimeListener = new ArrayList();
  Map<String, Integer> wsqNew = new HashMap();

  static
  {
    NOVEL_PAGE_SIZE = 50;
    t = new HandlerThread("InfoManager_DataBase_Stored_Thread");
    t.start();
    mLoadThread = new HandlerThread("InfoManager_DataBase_Update_Thread");
    mLoadThread.start();
  }

  private void _loadLiveNode(ISubscribeEventListener paramISubscribeEventListener)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", Integer.valueOf(this.mRootNode.mContentCategory.mLiveNode.getRadioCategoryNode().categoryId));
    localHashMap.put("use_time_stamp_cache", Boolean.valueOf(true));
    DataManager.getInstance().getData("live_category", this, localHashMap);
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RLC");
  }

  private void _loadLiveNodeV2(ISubscribeEventListener paramISubscribeEventListener)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", Integer.valueOf(this.mRootNode.mContentCategory.mLiveNode.getRadioCategoryNode().categoryId));
    localHashMap.put("use_time_stamp_cache", Boolean.valueOf(true));
    DataManager.getInstance().getData("v2_live_category", this, localHashMap);
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RLCV2");
  }

  private void _loadShareInfo(Node paramNode, ISubscribeEventListener paramISubscribeEventListener)
  {
    if (paramNode != null)
      registerNodeEventListener(paramNode, "ASIN");
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RSIN");
    HashMap localHashMap = new HashMap();
    localHashMap.put("use_time_stamp_cache", Boolean.valueOf(true));
    DataManager.getInstance().getData("get_share_info", this, localHashMap);
  }

  private void _setUmengAlias()
  {
    if ((this.mAgent != null) && (this.mDeviceId != null));
    try
    {
      this.mAgent.addAlias(this.mDeviceId, "qingting");
      return;
    }
    catch (Exception localException)
    {
    }
  }

  private void addLocalRecommendInfo()
  {
    RecommendCategoryNode localRecommendCategoryNode = root().mLocalRecommendCategoryNode;
    String str = getCurrentRegion();
    if ((!this.mAddLocalRecommendInfo) && (str != null) && (localRecommendCategoryNode != null) && (root().mNewFrontPageNode != null) && (root().mNewFrontPageNode.lstRecMain != null));
    for (int i = 0; ; i++)
      if (i < localRecommendCategoryNode.lstRecMain.size())
      {
        if (str.contains(((RecommendItemNode)((List)localRecommendCategoryNode.lstRecMain.get(i)).get(0)).belongName))
        {
          this.mAddLocalRecommendInfo = true;
          root().mNewFrontPageNode.lstRecMain.add(1, localRecommendCategoryNode.lstRecMain.get(i));
        }
      }
      else
        return;
  }

  private void checkMedia()
  {
    new CheckMediaServer(this.mContext).start();
  }

  private static void clog(String paramString)
  {
  }

  private void dispatchNodeEvent(Object paramObject, String paramString)
  {
    if ((paramObject != null) && (this.mapNodeEventListeners.containsKey(paramString)))
    {
      List localList = (List)this.mapNodeEventListeners.get(paramString);
      for (int i = 0; i < localList.size(); i++)
        ((INodeEventListener)localList.get(i)).onNodeUpdated(paramObject, paramString);
    }
  }

  private void dispatchNodeEvent(Object paramObject, Map<String, String> paramMap, String paramString)
  {
    if ((paramObject != null) && (this.mapNodeEventListeners.containsKey(paramString)))
    {
      List localList = (List)this.mapNodeEventListeners.get(paramString);
      for (int i = 0; i < localList.size(); i++)
        ((INodeEventListener)localList.get(i)).onNodeUpdated(paramObject, paramMap, paramString);
    }
  }

  private void dispatchSubscribeEvent(String paramString, DataExceptionStatus paramDataExceptionStatus)
  {
    if (this.mapSubscribeEventListeners.containsKey(paramString))
    {
      List localList = (List)this.mapSubscribeEventListeners.get(paramString);
      int i = localList.size();
      for (int j = 0; j < i; j++)
        ((ISubscribeEventListener)localList.get(j)).onNotification(paramString);
    }
  }

  private void dispatchViewTimeEvent()
  {
    Iterator localIterator = this.viewTimeListener.iterator();
    while (localIterator.hasNext())
    {
      WeakReference localWeakReference = (WeakReference)localIterator.next();
      if (localWeakReference.get() != null)
        ((ISubscribeEventListener)localWeakReference.get()).onNotification("viewTimeUpdated");
    }
  }

  private long getAbsoluteHourTime()
  {
    long l = System.currentTimeMillis();
    Calendar localCalendar = Calendar.getInstance();
    localCalendar.setTimeInMillis(l);
    int i = localCalendar.get(12);
    int j = localCalendar.get(13) + i * 60;
    return l / 1000L - j;
  }

  private boolean getAddedCollection()
  {
    if (this.mContext == null)
      return true;
    return SharedCfg.getInstance().getAddCollection();
  }

  public static InfoManager getInstance()
  {
    if (_instance == null)
      _instance = new InfoManager();
    return _instance;
  }

  private Node getNodeByCategoryId(int paramInt)
  {
    if (this.mRootNode == null)
      return null;
    return this.mRootNode.findNodeByCategoryId(paramInt);
  }

  private String getProgramsScheduleDuration()
  {
    int i = Calendar.getInstance().get(7);
    if (i == 1);
    String str4;
    for (String str1 = "7"; ; str1 = String.valueOf(i - 1))
    {
      String str2 = str1 + "/";
      String str3 = str2 + String.valueOf(i);
      str4 = str3 + "/";
      if (i != 7)
        break;
      return str4 + "1";
    }
    return str4 + String.valueOf(i + 1);
  }

  private int getRelativeTime(long paramLong)
  {
    Calendar localCalendar = Calendar.getInstance();
    localCalendar.setTimeInMillis(paramLong);
    int i = localCalendar.get(11);
    int j = localCalendar.get(12);
    return localCalendar.get(13) + (60 * (i * 60) + j * 60);
  }

  private boolean inAdWhiteList()
  {
    ChannelNode localChannelNode = root().getCurrentPlayingChannelNode();
    boolean bool = false;
    if (localChannelNode != null)
    {
      List localList = this.mLstAdWhite;
      bool = false;
      if (localList == null);
    }
    for (int i = 0; ; i++)
    {
      int j = this.mLstAdWhite.size();
      bool = false;
      if (i < j)
      {
        if (localChannelNode.channelId == ((Integer)this.mLstAdWhite.get(i)).intValue())
          bool = true;
      }
      else
        return bool;
    }
  }

  private void loadChannelsTiming()
  {
    this.mTimingDB = new ChannelTimingDB(getContext());
    this.mChannelsTiming = this.mTimingDB.load();
  }

  private void loadDataCenterList()
  {
    DataManager.getInstance().getData("GET_LIST_MEDIACENTER", this, null);
  }

  private void loadListLiveAttributes()
  {
    loadCategoryAttrs(getInstance().root().mContentCategory.mLiveNode.getRadioCategoryNode(), getInstance().root().mContentCategory.mLiveNode.getRadioCategoryNode().categoryId, null);
  }

  private void loadListLiveCategory()
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("use_time_stamp_cache", Boolean.valueOf(true));
    DataManager.getInstance().getData("GET_LIST_LIVE_CATEGORIES", this, localHashMap);
  }

  private void loadListVirtualCategory()
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("use_time_stamp_cache", Boolean.valueOf(true));
    DataManager.getInstance().getData("GET_LIST_CATEGORIES", this, localHashMap);
  }

  private void loadLiveNode(ISubscribeEventListener paramISubscribeEventListener)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("listener", paramISubscribeEventListener);
    Message localMessage = Message.obtain(this.mLoadHandler, 9, localHashMap);
    this.mLoadHandler.sendMessage(localMessage);
  }

  private void loadLiveNodeV2(ISubscribeEventListener paramISubscribeEventListener)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("listener", paramISubscribeEventListener);
    Message localMessage = Message.obtain(this.mLoadHandler, 24, localHashMap);
    this.mLoadHandler.sendMessage(localMessage);
  }

  private void loadLocalRecommendInfo(ISubscribeEventListener paramISubscribeEventListener)
  {
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RECV_LOCAL_RECOMMEND_INFO");
    DataManager.getInstance().getData("GET_LOCAL_RECOMMEND_INFO", this, null);
  }

  private void loadQtimeConfig()
  {
    DataManager.getInstance().getData("GET_QTIME_CONFIG", this, null);
  }

  private void modifyBanner(List<RecommendItemNode> paramList)
  {
    if (paramList == null);
    while (!enableApple())
      return;
    RecommendItemNode localRecommendItemNode = new RecommendItemNode();
    localRecommendItemNode.name = this.mAppleDesc;
    localRecommendItemNode.setSmallThumb(this.mAppleImage);
    localRecommendItemNode.desc = this.mAppleDesc;
    localRecommendItemNode.id = "";
    ActivityNode localActivityNode = new ActivityNode();
    localActivityNode.id = 0;
    localActivityNode.name = this.mAppleDesc;
    localActivityNode.type = "1";
    localActivityNode.updatetime = ((int)(System.currentTimeMillis() / 1000L));
    localActivityNode.contentUrl = this.mAppleUrl;
    localActivityNode.infoUrl = "";
    localActivityNode.infoTitle = this.mAppleDesc;
    localActivityNode.titleIconUrl = "";
    localActivityNode.network = null;
    localRecommendItemNode.setDetail(localActivityNode);
    paramList.add(localRecommendItemNode);
  }

  private void onRecvLocation(QTLocation paramQTLocation)
  {
    if (paramQTLocation == null);
    while (paramQTLocation.region == null)
      return;
    this.currentLocation = paramQTLocation;
    if ((this.mRootNode.mContentCategory != null) && (!paramQTLocation.region.equalsIgnoreCase("")) && (this.mRootNode.mContentCategory.mLiveNode != null))
    {
      this.mRootNode.mContentCategory.mLiveNode.setRegion(paramQTLocation.region);
      saveLastAvailableLocation(this.currentLocation);
      GlobalCfg.getInstance(this.mContext).setLocalIp(this.currentLocation.ip);
      if (this.mRootNode.mContentCategory.mLiveNode.mRadioNode != null)
        this.mRootNode.mContentCategory.mLiveNode.mRadioNode.restoreFromDBByCity(paramQTLocation.city);
    }
    try
    {
      QTLogger.getInstance().setRegion(paramQTLocation.region);
      QTLogger.getInstance().setCity(paramQTLocation.city);
      PlayerAgent.getInstance().setLocation(paramQTLocation.city, paramQTLocation.region);
      return;
    }
    catch (Exception localException)
    {
    }
  }

  private void saveLastAvailableLocation(QTLocation paramQTLocation)
  {
    if ((paramQTLocation == null) || (this.mContext == null));
    while ((paramQTLocation.city == null) || (paramQTLocation.region == null))
      return;
    try
    {
      SharedCfg.getInstance().setCurrentPosition(paramQTLocation.city, paramQTLocation.region);
      HashMap localHashMap = new HashMap();
      localHashMap.put("key", "lastlocation");
      localHashMap.put("value", paramQTLocation.city);
      DataManager.getInstance().getData("update_profile_value", null, localHashMap);
      GlobalCfg.getInstance(this.mContext).setLocalCity(paramQTLocation.city);
      GlobalCfg.getInstance(this.mContext).setLocalRegion(paramQTLocation.region);
      return;
    }
    catch (Exception localException)
    {
    }
  }

  private void saveSellAppsPackage()
  {
    if ((this.mSellAppsPackage != null) && (!this.mSellAppsPackage.equalsIgnoreCase("")))
      GlobalCfg.getInstance(this.mContext).setSellAppsPackage(this.mSellAppsPackage);
  }

  private void setNavigation(boolean paramBoolean)
  {
    if (this.mContext == null)
      return;
    this.mEnableNavigation = paramBoolean;
    SharedCfg.getInstance().setEnableNavigation(paramBoolean);
  }

  private void setServiceControl(INotificationServiceControl paramINotificationServiceControl)
  {
  }

  private void unBindService()
  {
    if (this.mContext == null);
  }

  public void _loadBillboard(Node paramNode, int paramInt1, int paramInt2, ISubscribeEventListener paramISubscribeEventListener)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("type", String.valueOf(paramInt1));
    if (paramInt1 == 1)
    {
      if (paramISubscribeEventListener != null)
        registerSubscribeEventListener(paramISubscribeEventListener, "RBCS");
      if (paramNode != null)
        registerNodeEventListener(paramNode, "ABCS");
      DataManager.getInstance().getData("GET_BILLBOARD_CHANNELS", this, localHashMap);
    }
    while (paramInt1 != 2)
      return;
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RBPS");
    if (paramNode != null)
      registerNodeEventListener(paramNode, "ABPS");
    DataManager.getInstance().getData("GET_BILLBOARD_PROGRAMS", this, localHashMap);
  }

  public void _loadLiveChannelNode(int paramInt, Node paramNode)
  {
    if (paramNode == null)
      return;
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", String.valueOf(paramInt));
    DataManager.getInstance().getData("GET_LIVE_CHANNEL_INFO", this, localHashMap);
    registerNodeEventListener(paramNode, "ADD_LIVE_CHANNEL_INFO");
  }

  public void addChatRoom(String paramString)
  {
    if (paramString == null)
      return;
    this.mChatroom += "_";
    this.mChatroom += paramString;
  }

  public void addDefaultCollection(int paramInt)
  {
    if (SharedCfg.getInstance().getDefaultCollection());
    ChannelNode localChannelNode;
    do
    {
      return;
      localChannelNode = ChannelHelper.getInstance().getChannel(paramInt, 1);
    }
    while (localChannelNode == null);
    setEnableFrontCollection(true);
    getInstance().root().mPersonalCenterNode.myCollectionNode.addFavNode(localChannelNode);
    SharedCfg.getInstance().setDefaultCollection(true);
  }

  public void alignTime(int paramInt)
  {
    TimeBean localTimeBean = (TimeBean)this.mChannelsTiming.get(Integer.valueOf(paramInt));
    if (localTimeBean == null)
      return;
    localTimeBean.alignViewTime();
    this.mNeedWrite = true;
    dispatchViewTimeEvent();
  }

  public boolean allowDownloadMusic(int paramInt)
  {
    if (this.allowDownloadMusic != null)
    {
      if (this.allowDownloadMusic.equalsIgnoreCase("all"));
      while (this.allowDownloadMusic.contains(String.valueOf(paramInt)))
        return true;
    }
    return false;
  }

  public void apple(boolean paramBoolean)
  {
    this.mInstallApple = paramBoolean;
  }

  public boolean applyRules()
  {
    return (!this.mUsedOnlyInWifi) || (getNetWorkType() == 1);
  }

  public void clearAllChannelUpdates()
  {
    saveChannelsTime();
  }

  public void clearAllRegisterListeners()
  {
    Iterator localIterator1 = this.mapNodeEventListeners.entrySet().iterator();
    while (localIterator1.hasNext())
      ((List)((Map.Entry)localIterator1.next()).getValue()).clear();
    this.mapNodeEventListeners.clear();
    Iterator localIterator2 = this.mapSubscribeEventListeners.entrySet().iterator();
    while (localIterator2.hasNext())
      ((List)((Map.Entry)localIterator2.next()).getValue()).clear();
    this.mapSubscribeEventListeners.clear();
  }

  public void delChatRoom(String paramString)
  {
    if (paramString == null);
  }

  public void dispatchSubscribeEvent(String paramString)
  {
    dispatchSubscribeEvent(paramString, DataExceptionStatus.OK);
  }

  public boolean enableADVLocation()
  {
    return this.enableADVLocation;
  }

  public boolean enableAchilles()
  {
    return this.mAchilles;
  }

  public boolean enableAdvertisement()
  {
    return true;
  }

  public void enableAirWave(boolean paramBoolean)
  {
    this.mEnableAirWave = paramBoolean;
  }

  public boolean enableAirWave()
  {
    return this.mEnableAirWave;
  }

  public void enableAirWaveCity(boolean paramBoolean)
  {
    this.mEnableAirWaveCity = paramBoolean;
  }

  public boolean enableAirWaveCity()
  {
    return this.mEnableAirWaveCity;
  }

  public boolean enableApple()
  {
    return this.mInstallApple;
  }

  public boolean enableAudioAdv(ProgramNode paramProgramNode)
  {
    if ((paramProgramNode == null) || (!this.mEnableAudioAdv));
    while ((paramProgramNode.isDownloadProgram) || (paramProgramNode.channelType == 0))
      return false;
    return true;
  }

  public boolean enableBarrage(int paramInt)
  {
    if (this.enableBarrage != null)
    {
      if (this.enableBarrage.equalsIgnoreCase("all"));
      while (this.enableBarrage.contains(String.valueOf(paramInt)))
        return true;
    }
    return false;
  }

  public boolean enableBillboard()
  {
    return true;
  }

  public boolean enableChannelPaging()
  {
    return this.mEnableChannelPaging;
  }

  public boolean enableDefaultCollection()
  {
    if (this.mContext == null);
    while (!LifeTime.isFirstLaunchAfterInstall)
      return false;
    return true;
  }

  public boolean enableDelChannelCache()
  {
    return true;
  }

  public boolean enableEasterEgg()
  {
    if (this.mContext == null)
      return false;
    return SharedCfg.getInstance().getEnableEasterEgg();
  }

  public boolean enableForeignChannels()
  {
    return false;
  }

  public boolean enableGame()
  {
    return this.mEnableGame;
  }

  public boolean enableGenerateDB()
  {
    return this.autoGenerateDataBase;
  }

  public boolean enableH5()
  {
    return this.mEnabelH5;
  }

  public boolean enableIRE()
  {
    return true;
  }

  public void enableJDCity(boolean paramBoolean)
  {
    this.mEnableJDCity = paramBoolean;
  }

  public boolean enableJDCity()
  {
    return this.mEnableJDCity;
  }

  public boolean enableJdAd()
  {
    return this.mHasJdAd;
  }

  public boolean enableNavigation()
  {
    return true;
  }

  public boolean enableNewCDN()
  {
    return false;
  }

  public boolean enableOriginalSource()
  {
    return false;
  }

  public boolean enablePingan()
  {
    return this.mEnablePingAN;
  }

  public boolean enableProgramABTest()
  {
    return this.mEnabelProgramABTest;
  }

  public boolean enableRecPage()
  {
    return true;
  }

  public boolean enableRecommendShare()
  {
    return false;
  }

  public boolean enableSellApps()
  {
    if ((this.mHasSellApp) || (!hasWifi()));
    while ((this.mSellAppsInfo == null) || (this.mSellAppsInfo.equalsIgnoreCase("")) || (this.mSellAppsInfo.equalsIgnoreCase("#")))
      return false;
    return this.mSellApps;
  }

  public boolean enableSetDNS()
  {
    return this.mEnableSetDNS;
  }

  public boolean enableSocial(String paramString)
  {
    boolean bool = true;
    if ((paramString == null) || (this.mEnableGroup == null) || (paramString.equalsIgnoreCase("0")))
      bool = false;
    do
    {
      do
        return bool;
      while (this.mEnableGroup.equalsIgnoreCase("all"));
      if (this.mEnableGroup.equalsIgnoreCase("#"))
        return false;
    }
    while (this.mEnableGroup.contains(paramString));
    return false;
  }

  public boolean enableTBMagic()
  {
    return this.mEnableTBMagic;
  }

  public boolean enableTaobaoAudioAdv()
  {
    if ((inAdWhiteList()) || (!hasWifi()));
    while ((System.currentTimeMillis() / 1000L - getInstance().getLastPlayAdvertisementTime() <= this.mTaobaoAdvInterval) || (this.mTaobaoAdvInterval <= this.AD_MIN_INTERVAL) || (System.currentTimeMillis() / 1000L - this.bootstrapTime <= this.AD_MIN_INTERVAL))
      return false;
    return this.mEnableTaobaoAudioAdv;
  }

  public boolean enableWoQt()
  {
    return this.mEnableWoQt;
  }

  public boolean enterChatroom(Node paramNode)
  {
    if ((paramNode == null) || (this.mChatroom == null));
    while ((!paramNode.nodeName.equalsIgnoreCase("channel")) || (!this.mChatroom.contains(String.valueOf(((ChannelNode)paramNode).channelId))))
      return false;
    return true;
  }

  public void exitLiveRoom()
  {
    ExitAction localExitAction = new ExitAction();
    localExitAction.setContentInfo(1, 1);
    RoomManager.getInstance().getRoomByType(1).doAction(localExitAction);
  }

  public ChannelNode findChannelNodeByRecommendDetail(Node paramNode)
  {
    if (paramNode == null)
      return null;
    if ((paramNode.parent != null) && (paramNode.parent.nodeName.equalsIgnoreCase("recommenditem")))
    {
      if ((paramNode.nextSibling != null) && (paramNode.nextSibling.parent != null) && (paramNode.nextSibling.parent.nodeName.equalsIgnoreCase("channel")))
        return (ChannelNode)paramNode.nextSibling.parent;
      return root().getCurrentPlayingChannelNode();
    }
    return root().getCurrentPlayingChannelNode();
  }

  public boolean forceLogin()
  {
    return this.mForceLogin;
  }

  public QTADLocation getADVLocation()
  {
    return this.advLocation;
  }

  public String getAchillesUrl()
  {
    List localList1 = this.mAchillesLstUrls;
    Object localObject = null;
    String str;
    if (localList1 != null)
    {
      boolean bool1 = getInstance().hasWifi();
      localObject = null;
      if (bool1)
      {
        int i = this.mAchillesIndex;
        int j = this.mAchillesLstUrls.size();
        localObject = null;
        if (i < j)
        {
          List localList2 = this.mAchillesLstPercents;
          boolean bool2 = false;
          if (localList2 != null)
          {
            int k = this.mAchillesIndex;
            int m = this.mAchillesLstPercents.size();
            bool2 = false;
            if (k < m)
              bool2 = RangeRandom.random(((Integer)this.mAchillesLstPercents.get(this.mAchillesIndex)).intValue() / 100.0D);
          }
          if (!bool2)
            break label169;
          str = (String)this.mAchillesLstUrls.get(this.mAchillesIndex);
          QTMSGManage.getInstance().sendStatistcsMessage("achilles", str);
        }
      }
    }
    while (true)
    {
      this.mAchillesIndex = (1 + this.mAchillesIndex);
      localObject = str;
      return localObject;
      label169: str = null;
    }
  }

  public String getAddGroupSlogan()
  {
    return this.mAddGroupSlogan;
  }

  public int getAirWaveClick()
  {
    return this.mEnableAirWaveClick;
  }

  public int getAirWaveShow()
  {
    return this.mEnableAirWaveShow;
  }

  public long getAthenaLife()
  {
    return this.mAthenaLife;
  }

  public int getAudioQualitySetting()
  {
    if ((this.mAudioQualitySetting == -1) && (this.mContext != null))
      this.mAudioQualitySetting = SharedCfg.getInstance().getAudioQualitySetting();
    return this.mAudioQualitySetting;
  }

  public boolean getAutoPlayAfterStart()
  {
    return SharedCfg.getInstance().getAutoPlayAfterStart();
  }

  public boolean getAutoReserve()
  {
    return false;
  }

  public int getAutoReserveMinDuration()
  {
    return this.mAutoReserveMinDuration;
  }

  public boolean getAutoSeek()
  {
    return this.mAutoSeek;
  }

  public boolean getBindRecommendShare()
  {
    return this.mBindRecommendShare;
  }

  public int getBootstrapTime()
  {
    return this.bootstrapTime;
  }

  public Node getCategoryNodeByProgramNode(Node paramNode)
  {
    if (paramNode == null);
    return null;
  }

  public Node getCategoryNodeFromAnchor(int paramInt, Node paramNode)
  {
    if (this.mRootNode == null)
      return null;
    if (paramNode != null)
      return this.mRootNode.findCategoryNodeFromAnchor(paramInt, paramNode);
    return getCategoryNodeFromAnchor(paramInt, this.mRootNode.mContentCategory);
  }

  public Node getCategoryNodeFromAnchorByChannelId(int paramInt, Node paramNode)
  {
    if (this.mRootNode == null)
      return null;
    if (paramNode != null)
      return this.mRootNode.findCategoryNodeFromAnchorByChannelId(paramInt, paramNode);
    return getCategoryNodeFromAnchorByChannelId(paramInt, this.mRootNode.mContentCategory);
  }

  public String getChangeUniqueId()
  {
    return DeviceInfo.getChangeUniqueId(this.mContext);
  }

  public Node getChannelNodeByChannelId(int paramInt)
  {
    return this.mRootNode.findNodeByChannelId(paramInt);
  }

  public boolean getChinaUnicomZone()
  {
    return this.mChinaUnicomZone;
  }

  public Context getContext()
  {
    return this.mContext;
  }

  public String getCurrentCity()
  {
    if (this.currentLocation != null)
      return this.currentLocation.city;
    return null;
  }

  public QTLocation getCurrentLocation()
  {
    return this.currentLocation;
  }

  public String getCurrentRegion()
  {
    if (this.currentLocation != null)
      return this.currentLocation.region;
    return null;
  }

  public Handler getDataStoreHandler()
  {
    return this.dataStoreHandler;
  }

  public int getDefaultCollectionChannelId()
  {
    return this.defaultCollectionChannelId;
  }

  public int getDefaultSpecialTopic()
  {
    return this.defaultSpecialTopicId;
  }

  public String getDeviceId()
  {
    if (this.mDeviceId == null)
      return "notification";
    return this.mDeviceId;
  }

  public boolean getEnableAutoSeek()
  {
    return this.mEnableSeek;
  }

  public boolean getEnableCustomCategory()
  {
    return this.mEnableCustomCategory;
  }

  public boolean getEnableFrontCollection()
  {
    return this.mFrontCollection;
  }

  public boolean getEnableMediaControll()
  {
    if (this.mContext == null)
      return false;
    return SharedCfg.getInstance().getEnableMediaControll();
  }

  public boolean getEnableMobileNetwork()
  {
    return false;
  }

  public int getEnableNewCheckin()
  {
    return this.mNewCheckin;
  }

  public String getEndAudioAdv(int paramInt1, int paramInt2)
  {
    if (paramInt1 > 0)
    {
      loadFrontAudioAdv(paramInt1, paramInt2);
      AdPos localAdPos = getInstance().root().mAdvertisementInfoNode.getAudioAdPos(paramInt1, 5);
      if (localAdPos != null)
      {
        AdvertisementItemNode localAdvertisementItemNode = root().mAdvertisementInfoNode.getAdvertisement(localAdPos.posid);
        if (localAdvertisementItemNode != null)
        {
          if ((localAdvertisementItemNode.parent != null) && (localAdvertisementItemNode.parent.nodeName.equalsIgnoreCase("adpos")) && (((AdPos)localAdvertisementItemNode.parent).isEndAudio()))
          {
            if ((this.bootstrapCnt > 0) || (inAdWhiteList()))
              return null;
            if ((System.currentTimeMillis() / 1000L - getInstance().getLastPlayAdvertisementTime() > localAdvertisementItemNode.interval) && (localAdvertisementItemNode.interval > this.AD_MIN_INTERVAL) && (System.currentTimeMillis() / 1000L - this.bootstrapTime > this.AD_MIN_INTERVAL))
            {
              getInstance().setPlayAdvertisementTime();
              localAdvertisementItemNode.onShow();
              QTMSGManage.getInstance().sendStatistcsMessage("audioAdv", "end_" + localAdPos.posquery);
              getInstance().root().mAdvertisementInfoNode.setCurrPlayingAdv(localAdvertisementItemNode);
              return localAdvertisementItemNode.audioPath;
            }
            return null;
          }
        }
        else
          getInstance().loadAdvertisement(localAdPos, paramInt2, null);
      }
    }
    return null;
  }

  public long getEndDayTime()
  {
    long l = System.currentTimeMillis() / 1000L;
    return l - getRelativeTime(1000L * l) + 86399;
  }

  public String getFrontAudioAdv(int paramInt1, int paramInt2)
  {
    if (paramInt1 > 0)
    {
      AdPos localAdPos = getInstance().root().mAdvertisementInfoNode.getAudioAdPos(paramInt1, 4);
      if (localAdPos != null)
      {
        AdvertisementItemNode localAdvertisementItemNode = root().mAdvertisementInfoNode.getAdvertisement(localAdPos.posid);
        if (localAdvertisementItemNode != null)
        {
          if ((localAdvertisementItemNode.parent != null) && (localAdvertisementItemNode.parent.nodeName.equalsIgnoreCase("adpos")) && (((AdPos)localAdvertisementItemNode.parent).isFrontAudio()))
          {
            if ((this.bootstrapCnt > 0) || (inAdWhiteList()))
              return null;
            if ((System.currentTimeMillis() / 1000L - getInstance().getLastPlayAdvertisementTime() > localAdvertisementItemNode.interval) && (localAdvertisementItemNode.interval > this.AD_MIN_INTERVAL) && (System.currentTimeMillis() / 1000L - this.bootstrapTime > this.AD_MIN_INTERVAL))
            {
              getInstance().setPlayAdvertisementTime();
              QTMSGManage.getInstance().sendStatistcsMessage("audioAdv", "front_" + localAdPos.posquery);
              localAdvertisementItemNode.onShow();
              getInstance().root().mAdvertisementInfoNode.setCurrPlayingAdv(localAdvertisementItemNode);
              return localAdvertisementItemNode.audioPath;
            }
            return null;
          }
        }
        else
          getInstance().loadAdvertisement(localAdPos, paramInt2, null);
      }
    }
    return null;
  }

  public boolean getInBackground()
  {
    return this.mInBackground;
  }

  public int getJDClick()
  {
    return this.jdClick;
  }

  public int getJDShow()
  {
    return this.jdShow;
  }

  public int getJdAdPosition()
  {
    return this.mJdAdPosition;
  }

  public long getLastPlayAdvertisementTime()
  {
    return this.mLastPlayAdvertisement;
  }

  public AlarmInfo getLatestAlarm(long paramLong)
  {
    if (paramLong < 0L)
      return null;
    if ((this.mRootNode == null) || (this.mRootNode.mPersonalCenterNode == null) || (this.mRootNode.mPersonalCenterNode.alarmInfoNode == null))
      return null;
    List localList = this.mRootNode.mPersonalCenterNode.alarmInfoNode.mLstAlarms;
    if ((localList == null) || (localList.size() == 0))
      return null;
    long l1 = 9223372036854775807L;
    int i = -1;
    for (int j = 0; j < localList.size(); j++)
    {
      long l2 = ((AlarmInfo)localList.get(j)).getNextShoutTime();
      if (l1 > l2)
      {
        i = j;
        l1 = l2;
      }
    }
    if ((i != -1) && (i < localList.size()))
      return (AlarmInfo)localList.get(i);
    return null;
  }

  public int getLinkDuration()
  {
    return this.linkDuration;
  }

  public String getLocalRoomId()
  {
    Node localNode = getInstance().root().mContentCategory.mLiveNode.getLocalCategoryNode();
    if (localNode == null)
      return this.mMarsRoomId;
    String str = this.mMarsRoomId;
    if (localNode.nodeName.equalsIgnoreCase("category"))
      return str + ((CategoryNode)localNode).categoryId;
    return str;
  }

  public List<GameBean> getLstGameBean()
  {
    return this.mLstGameBean;
  }

  public String getMall(int paramInt)
  {
    if (this.mall != null)
      return (String)this.mall.get(Integer.valueOf(paramInt));
    return null;
  }

  public int getMaxWordsInLiveRoom()
  {
    return this.mMaxWordsInLiveRoom;
  }

  public int getMinReserveThreshold()
  {
    return this.mMinReserveThreshold;
  }

  public boolean getMobileAlert()
  {
    return this.mMobileAlert;
  }

  public boolean getMobilePlay()
  {
    return this.mMobilePlay;
  }

  public long getMsgSeq()
  {
    return this.msgSeq;
  }

  public boolean getMutiRate()
  {
    if (this.mContext == null)
      return false;
    return SharedCfg.getInstance().getMutiRate();
  }

  public int getNetWorkType()
  {
    if (this.mContext == null)
      return -1;
    return MobileState.getNetWorkType(this.mContext);
  }

  public String getNewCDN()
  {
    if (this.mContext == null)
      return "";
    return this.mNewCDN;
  }

  public int getNovelPageSize()
  {
    return NOVEL_PAGE_SIZE;
  }

  public String getPackageName()
  {
    if (this.mContext != null)
      return this.mContext.getPackageName();
    return null;
  }

  public Node getParentCategoryNode(int paramInt, Node paramNode)
  {
    Node localNode;
    if ((this.mRootNode == null) || (paramNode == null))
      localNode = null;
    do
    {
      return localNode;
      localNode = paramNode.parent;
    }
    while ((localNode != null) && (localNode.nodeName.equalsIgnoreCase("category")) && (((CategoryNode)localNode).categoryId == paramInt));
    return getNodeByCategoryId(paramInt);
  }

  public ProgramABTestBean getProgramABTest(int paramInt1, int paramInt2)
  {
    if ((enableProgramABTest()) && (this.mapProgramABTest != null))
    {
      ProgramABTestBean localProgramABTestBean = (ProgramABTestBean)this.mapProgramABTest.get(Integer.valueOf(paramInt2));
      if (localProgramABTestBean != null)
      {
        if (localProgramABTestBean.abtestNum == 0)
          localProgramABTestBean = null;
        String str;
        do
        {
          return localProgramABTestBean;
          str = SharedCfg.getInstance().getValue(String.valueOf(localProgramABTestBean.abtestNum));
        }
        while ((str != null) && (str.equalsIgnoreCase("1")));
        return null;
      }
    }
    return null;
  }

  public int getProgramPageSize()
  {
    return 30;
  }

  public boolean getPushSwitch()
  {
    return GlobalCfg.getInstance(getContext()).isPushSwitchEnabled();
  }

  public boolean getQuitAfterPlay()
  {
    return this.mQuitAfterPlay;
  }

  public RecommendCategoryNode getRecommendCategoryBySecId(int paramInt)
  {
    return root().getRecommendCategoryNode(Integer.valueOf(paramInt).intValue());
  }

  public String getShareTag()
  {
    return this.mShareTag;
  }

  public boolean getShowMobileNetworkSetting()
  {
    return this.mSettingMobileNetwork;
  }

  public boolean getShowRecommendApp()
  {
    return this.mShowRecommendApp;
  }

  public boolean getStatusPage()
  {
    return this.mStatusPage;
  }

  public boolean getTaobaoAudioAdv()
  {
    return this.mEnableTaobaoAudioAdv;
  }

  public TimeBean getTime(String paramString)
  {
    return (TimeBean)this.mChannelsTiming.get(paramString);
  }

  public boolean getTopHistory()
  {
    return this.mTopHisotory;
  }

  public boolean getUseIpMedia()
  {
    return this.mUseIpInMedia;
  }

  public boolean getUsedOnlyInWifi()
  {
    return this.mUsedOnlyInWifi;
  }

  public UserProfile getUserProfile()
  {
    return this.mUserProfile;
  }

  public String getUserguideRecommend()
  {
    return this.mUserguidRecommend;
  }

  public String getWeiboIdByGroupId(String paramString)
  {
    if ((paramString == null) || (this.mPushToWeiboGroup == null) || (this.mPushToWeiboId == null))
      return null;
    boolean bool = ((String)this.mPushToWeiboGroup.get(0)).equalsIgnoreCase("9999999");
    int i = 0;
    if (bool)
      return (String)this.mPushToWeiboId.get(0);
    do
    {
      i++;
      if (i >= this.mPushToWeiboGroup.size())
        break;
    }
    while ((!((String)this.mPushToWeiboGroup.get(i)).equalsIgnoreCase(paramString)) || (i >= this.mPushToWeiboId.size()));
    return (String)this.mPushToWeiboId.get(i);
    return null;
  }

  public String getWoQtRuleText()
  {
    return this.ruleText;
  }

  public String getWsq(int paramInt)
  {
    if (this.qtimeConfig != null)
      return (String)this.qtimeConfig.get(Integer.valueOf(paramInt));
    return null;
  }

  public String getWsqEntry(int paramInt)
  {
    if (this.qtimeEntry != null)
      return (String)this.qtimeEntry.get(Integer.valueOf(paramInt));
    return null;
  }

  public int getWsqNew(String paramString)
  {
    if (this.wsqNew.containsKey(paramString))
      return ((Integer)this.wsqNew.get(paramString)).intValue();
    return 0;
  }

  public String h5Category(int paramInt)
  {
    if ((enableH5()) && (this.h5_category != null))
    {
      H5Bean localH5Bean = (H5Bean)this.h5_category.get(Integer.valueOf(paramInt));
      if (localH5Bean != null)
      {
        if (localH5Bean.abtestNum == 0)
          return localH5Bean.url;
        String str = SharedCfg.getInstance().getValue(String.valueOf(localH5Bean.abtestNum));
        if ((str != null) && (str.equalsIgnoreCase("1")))
          return localH5Bean.url;
        return null;
      }
    }
    return null;
  }

  public String h5Channel(int paramInt)
  {
    if ((enableH5()) && (this.h5_channel != null))
    {
      H5Bean localH5Bean = (H5Bean)this.h5_channel.get(Integer.valueOf(paramInt));
      if (localH5Bean != null)
      {
        if (localH5Bean.abtestNum == 0)
          return localH5Bean.url;
        String str = SharedCfg.getInstance().getValue(String.valueOf(localH5Bean.abtestNum));
        if ((str != null) && (str.equalsIgnoreCase("1")))
          return localH5Bean.url;
        return null;
      }
    }
    return null;
  }

  public String h5Podcaster(int paramInt)
  {
    if ((enableH5()) && (this.h5_podcaster != null))
    {
      H5Bean localH5Bean = (H5Bean)this.h5_podcaster.get(Integer.valueOf(paramInt));
      if (localH5Bean != null)
      {
        if (localH5Bean.abtestNum == 0)
          return localH5Bean.url;
        String str = SharedCfg.getInstance().getValue(String.valueOf(localH5Bean.abtestNum));
        if ((str != null) && (str.equalsIgnoreCase("1")))
          return localH5Bean.url;
        return null;
      }
    }
    return null;
  }

  public String h5SpecialTopic(int paramInt)
  {
    if ((enableH5()) && (this.h5_specialTopic != null))
    {
      H5Bean localH5Bean = (H5Bean)this.h5_specialTopic.get(Integer.valueOf(paramInt));
      if (localH5Bean != null)
      {
        if (localH5Bean.abtestNum == 0)
          return localH5Bean.url;
        String str = SharedCfg.getInstance().getValue(String.valueOf(localH5Bean.abtestNum));
        if ((str != null) && (str.equalsIgnoreCase("1")))
          return localH5Bean.url;
        return null;
      }
    }
    return null;
  }

  public boolean hasConnectedNetwork()
  {
    return getNetWorkType() != -1;
  }

  public boolean hasMobileNetwork()
  {
    int i = 1;
    int j = getNetWorkType();
    if ((j == i) || (j == -1))
      i = 0;
    return i;
  }

  public boolean hasWifi()
  {
    return getNetWorkType() == 1;
  }

  public boolean inBlack(String paramString)
  {
    return (paramString != null) && (this.mLiveRoomBlack.contains(paramString));
  }

  public void init()
  {
  }

  public void initDataCenter()
  {
    MediaCenter.getInstance().mDeviceId = DeviceInfo.getUniqueId(this.mContext);
    MediaCenter.getInstance().restoreMediaCenter();
    MediaCenter.getInstance().pkMediaCenter();
  }

  public void initInfoTree()
  {
    this.mHasInit = true;
    loadChannelsTiming();
    if ((this.currentLocation == null) && (this.mContext != null));
    try
    {
      String str1 = SharedCfg.getInstance().getLastAvailableCity();
      String str2 = SharedCfg.getInstance().getLastAvailableCity();
      String str3 = GlobalCfg.getInstance(this.mContext).getLocalIp();
      if ((str1 != null) && (str2 != null))
      {
        this.currentLocation = new QTLocation();
        this.currentLocation.city = str1;
        this.currentLocation.region = str2;
        this.currentLocation.ip = str3;
        PlayerAgent.getInstance().setLocation(str1, str2);
      }
      label101: this.mRootNode.init();
      initDataCenter();
      checkMedia();
      if (this.mContext != null)
      {
        this.mUsedOnlyInWifi = SharedCfg.getInstance().getOnlyUsedInWifi();
        this.mAutoSeek = SharedCfg.getInstance().getAutoSeek();
        this.mAudioQualitySetting = SharedCfg.getInstance().getAudioQualitySetting();
        this.mNewCDN = SharedCfg.getInstance().getNewCDN();
        this.mAutoReserveMinDuration = SharedCfg.getInstance().getAutoReserveDuration();
        this.msgSeq = GlobalCfg.getInstance(this.mContext).getMsgSeq();
      }
      return;
    }
    catch (Exception localException)
    {
      break label101;
    }
  }

  public void initInfoTreeFromDB()
  {
    if (this.mHasInit);
    do
    {
      return;
      this.mHasInit = true;
    }
    while (this.mRootNode == null);
    this.mRootNode.init();
    this.mRootNode.restoreContentFromDB();
  }

  public void insertTime(String paramString, long paramLong)
  {
    if ((TimeBean)this.mChannelsTiming.get(paramString) == null)
    {
      TimeBean localTimeBean = new TimeBean(paramLong, paramLong);
      this.mChannelsTiming.put(paramString, localTimeBean);
      this.mNeedWrite = true;
    }
  }

  public boolean isDownloadCategory(int paramInt)
  {
    return paramInt == DownLoadInfoNode.mDownloadId;
  }

  public boolean isLocalRecommendInfoAdded()
  {
    return this.mAddLocalRecommendInfo;
  }

  public boolean isNetworkAvailable()
  {
    if (this.mContext == null)
      return false;
    return MobileState.isNetWorkEnable(this.mContext);
  }

  public boolean isTestLiveChannel(int paramInt)
  {
    if (this.liveChannel != null)
      return this.liveChannel.contains(Integer.valueOf(paramInt));
    return false;
  }

  public boolean jumpToProgram(int paramInt)
  {
    return (this.qtimeEntryType != null) && (((String)this.qtimeEntryType.get(Integer.valueOf(paramInt))).equals("program"));
  }

  public void loadADLoc()
  {
    DataManager.getInstance().getData("GET_AD_LOCATION", this, null);
  }

  public void loadADPos()
  {
    DataManager.getInstance().getData("GET_AD_POS", this, null);
  }

  public void loadAMAdConfig()
  {
    DataManager.getInstance().getData("GET_AM_AD_CONFIG", this, null);
  }

  public void loadActivityListNodes(Node paramNode, ISubscribeEventListener paramISubscribeEventListener)
  {
    if (paramNode == null);
    do
    {
      return;
      DataManager.getInstance().getData("GET_LIST_ACTIVITIES", this, null);
      registerNodeEventListener(paramNode, "AACTL");
    }
    while (paramISubscribeEventListener == null);
    registerSubscribeEventListener(paramISubscribeEventListener, "RACTL");
  }

  public void loadAdConfig()
  {
    DataManager.getInstance().getData("GET_AD_CONFIG", this, null);
  }

  public void loadAdWhiteList()
  {
    DataManager.getInstance().getData("GET_AD_WHITE_LIST", this, null);
  }

  public void loadAdvFromThirdParty(int paramInt)
  {
    try
    {
      if (enableAirWave())
      {
        if (!getInstance().hasConnectedNetwork())
          return;
        String str1 = paramInt + "_" + "GET_ADV_FROM_AIRWAVE";
        if (!root().hasLoadUrls(str1, false))
        {
          HashMap localHashMap = new HashMap();
          localHashMap.put("bid", ThirdAdv.getInstance().getAirWaveBID());
          localHashMap.put("adspaceid", "0A89BCB4E85400C4");
          localHashMap.put("adtype", "2");
          localHashMap.put("pkgname", "fm.qingting.qtradio");
          localHashMap.put("appname", URLEncoder.encode("蜻蜓FM", "UTF-8"));
          localHashMap.put("conn", ThirdAdv.getInstance().getAirWaveNetType());
          localHashMap.put("carrier", ThirdAdv.getInstance().getAirWaveCarrier());
          localHashMap.put("apitype", "2");
          localHashMap.put("os", "0");
          localHashMap.put("osv", DeviceInfo.getAndroidOsVersion());
          localHashMap.put("aid", ThirdAdv.getInstance().getAirWaveAid());
          localHashMap.put("device", URLEncoder.encode(Build.BRAND, "UTF-8"));
          ThirdTracker.getInstance();
          localHashMap.put("ua", URLEncoder.encode("QingTing Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22;) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1", "UTF-8"));
          QTLocation localQTLocation = this.currentLocation;
          String str2 = null;
          if (localQTLocation != null)
            str2 = this.currentLocation.ip;
          if ((str2 != null) && (!str2.equalsIgnoreCase("")))
            localHashMap.put("ip", str2);
          while (true)
          {
            localHashMap.put("width", "1080");
            localHashMap.put("height", "418");
            localHashMap.put("pid", "qtradio");
            localHashMap.put("pcat", "5");
            localHashMap.put("density", String.valueOf(ScreenType.screenDensity));
            DataManager.getInstance().getData("GET_ADV_FROM_AIRWAVE", this, localHashMap);
            return;
            localHashMap.put("ip", "122.207.173.122");
          }
        }
      }
      return;
    }
    catch (Exception localException)
    {
    }
  }

  public void loadAdvertisement(AdPos paramAdPos, int paramInt, ISubscribeEventListener paramISubscribeEventListener)
  {
    if (paramAdPos == null);
    String str;
    do
    {
      return;
      str = paramAdPos.posid + "_" + paramAdPos.posquery + "_" + "GET_AD_INFO";
    }
    while (root().hasLoadUrls(str, false));
    registerNodeEventListener(paramAdPos, "ADD_ADVERTISEMENT_INFO");
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RADI");
    HashMap localHashMap = new HashMap();
    localHashMap.put("zone", paramAdPos.posid);
    localHashMap.put("posquery", paramAdPos.posquery);
    localHashMap.put("deviceid", this.mDeviceId);
    localHashMap.put("devicetype", "phone");
    localHashMap.put("status", "silent");
    if (this.currentLocation != null)
      localHashMap.put("region", this.currentLocation.getRegionCode());
    while (true)
    {
      localHashMap.put("pkg", getPackageName());
      localHashMap.put("phonetype", "Android");
      if (paramInt == -1)
        break;
      localHashMap.put("channel", String.valueOf(paramInt));
      DataManager.getInstance().getData("GET_AD_INFO_BYCHANNEL", this, localHashMap);
      return;
      localHashMap.put("region", "un");
    }
    DataManager.getInstance().getData("GET_AD_INFO", this, localHashMap);
  }

  public void loadBillboard(Node paramNode, int paramInt1, int paramInt2, ISubscribeEventListener paramISubscribeEventListener)
  {
    if (paramNode == null)
      return;
    HashMap localHashMap = new HashMap();
    localHashMap.put("listener", paramISubscribeEventListener);
    localHashMap.put("size", Integer.valueOf(paramInt2));
    localHashMap.put("type", Integer.valueOf(paramInt1));
    localHashMap.put("node", paramNode);
    Message localMessage = Message.obtain(this.mLoadHandler, 25, localHashMap);
    this.mLoadHandler.sendMessage(localMessage);
  }

  public void loadCategoryAttrs(Node paramNode, int paramInt, ISubscribeEventListener paramISubscribeEventListener)
  {
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RECV_ATTRIBUTES");
    String str = paramInt + "GET_CATEGORY_ATTRS";
    if (root().hasLoadUrls(str, false))
      return;
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", String.valueOf(paramInt));
    localHashMap.put("use_time_stamp_cache", Boolean.valueOf(true));
    if (paramNode != null)
      registerNodeEventListener(paramNode, "ADD_CATEGORY_ATTR");
    DataManager.getInstance().getData("GET_CATEGORY_ATTRS", this, localHashMap);
  }

  public void loadChannelNodes(int paramInt, Node paramNode, ISubscribeEventListener paramISubscribeEventListener)
  {
  }

  public void loadCurrentPlayingPrograms(String paramString, ISubscribeEventListener paramISubscribeEventListener)
  {
    if (paramString == null);
    do
    {
      HashMap localHashMap;
      String str;
      do
      {
        return;
        localHashMap = new HashMap();
        str = paramString + "_" + "get_current_playing_programs";
      }
      while (root().hasLoadUrls(str, false));
      localHashMap.put("ids", paramString);
      localHashMap.put("current_time", String.valueOf(getAbsoluteHourTime()));
      DataManager.getInstance().getData("get_current_playing_programs", this, localHashMap);
      registerNodeEventListener(this.mRootNode.mPlayingProgramInfo, "ACPP");
    }
    while (paramISubscribeEventListener == null);
    registerSubscribeEventListener(paramISubscribeEventListener, "RCPPL");
  }

  public void loadCurrentProgramTopics(String paramString, long paramLong, ISubscribeEventListener paramISubscribeEventListener)
  {
    if (paramString == null);
    do
    {
      return;
      HashMap localHashMap = new HashMap();
      localHashMap.put("id", paramString);
      localHashMap.put("current_time", String.valueOf(paramLong));
      DataManager.getInstance().getData("current_program_topics", this, localHashMap);
      registerNodeEventListener(this.mRootNode.mProgramTopicInfoNode, "ACPT");
    }
    while (paramISubscribeEventListener == null);
    registerSubscribeEventListener(paramISubscribeEventListener, "RCPT");
  }

  public void loadDataAfterStart()
  {
    loadLiveNode(null);
    loadVirtualCategoryNodes(this.mRootNode.mContentCategory.mVirtualNode, null);
    loadLiveNodeV2(null);
    loadRingToneList(null);
    loadActivityListNodes(this.mRootNode.mActivityInfoNode, null);
    loadDataCenterList();
    loadListVirtualCategory();
    loadListLiveCategory();
    loadListLiveAttributes();
    loadADPos();
    loadShareInfo(root().mShareInfoNode, null);
    loadAdConfig();
    loadAMAdConfig();
    loadAdWhiteList();
    loadQtimeConfig();
    this.bootstrapTime = ((int)(System.currentTimeMillis() / 1000L));
  }

  public void loadEndAudioAdv(int paramInt1, int paramInt2)
  {
    if (paramInt1 > 0)
    {
      AdPos localAdPos = getInstance().root().mAdvertisementInfoNode.getAudioAdPos(paramInt1, 5);
      if ((localAdPos != null) && (root().mAdvertisementInfoNode.getAdvertisement(localAdPos.posid) == null))
        getInstance().loadAdvertisement(localAdPos, paramInt2, null);
    }
  }

  public void loadFreqChannelsInfo()
  {
  }

  public void loadFrontAudioAdv(int paramInt1, int paramInt2)
  {
    if (paramInt1 > 0)
    {
      AdPos localAdPos = getInstance().root().mAdvertisementInfoNode.getAudioAdPos(paramInt1, 4);
      if ((localAdPos != null) && (root().mAdvertisementInfoNode.getAdvertisement(localAdPos.posid) == null))
        getInstance().loadAdvertisement(localAdPos, paramInt2, null);
    }
  }

  public void loadHotSearchKeywords(ISubscribeEventListener paramISubscribeEventListener)
  {
    DataManager.getInstance().getData("hot_search_keywords", this, null);
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RSHK");
  }

  public void loadLinkInfo(int paramInt, ISubscribeEventListener paramISubscribeEventListener)
  {
    if (root().mLinkInfoNode.hasLoaded(paramInt));
    do
    {
      return;
      root().mLinkInfoNode.setLoaded(paramInt);
      HashMap localHashMap = new HashMap();
      localHashMap.put("linkid", String.valueOf(paramInt));
      DataManager.getInstance().getData("get_link_info", this, localHashMap);
      registerNodeEventListener(root().mLinkInfoNode, "ALI");
    }
    while (paramISubscribeEventListener == null);
    registerSubscribeEventListener(paramISubscribeEventListener, "RLI");
  }

  public void loadListLiveChannelsByAttr(int paramInt1, String paramString, int paramInt2, int paramInt3, ISubscribeEventListener paramISubscribeEventListener)
  {
    if ((paramString == null) || (paramString.equalsIgnoreCase("")));
    String str;
    do
    {
      return;
      if (paramISubscribeEventListener != null)
        registerSubscribeEventListener(paramISubscribeEventListener, "RECV_LIVE_CHANNELS_BYATTR");
      str = paramInt1 + "_" + paramString + "_" + "GET_LIST_LIVE_CHANNELS";
    }
    while (root().hasLoadUrls(str, false));
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", String.valueOf(paramInt1));
    localHashMap.put("attr", paramString);
    localHashMap.put("page", String.valueOf(paramInt2));
    localHashMap.put("pagesize", String.valueOf(paramInt3));
    DataManager.getInstance().getData("GET_LIST_LIVE_CHANNELS", this, localHashMap);
  }

  public void loadListVirtualChannelsByAttr(int paramInt1, String paramString, int paramInt2, int paramInt3, boolean paramBoolean, ISubscribeEventListener paramISubscribeEventListener)
  {
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RECV_VIRTUAL_CHANNELS_BYATTR");
    String str = paramInt1 + "_" + paramString + "_" + paramInt2 + " " + paramInt3 + "GET_LIST_CHANNELS";
    if (root().hasLoadUrls(str, paramBoolean))
      return;
    if ((paramString == null) || (paramString.equalsIgnoreCase("")) || (paramString.equalsIgnoreCase("0")))
    {
      loadOrderAllChannelNodes(paramInt1, paramInt2, paramInt3, paramBoolean, paramISubscribeEventListener);
      return;
    }
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", String.valueOf(paramInt1));
    localHashMap.put("attr", paramString);
    localHashMap.put("page", String.valueOf(paramInt2));
    localHashMap.put("pagesize", String.valueOf(paramInt3));
    DataManager.getInstance().getData("GET_LIST_CHANNELS", this, localHashMap);
  }

  public void loadLiveChannelNode(int paramInt, Node paramNode, ISubscribeEventListener paramISubscribeEventListener)
  {
    if (paramNode == null)
      return;
    HashMap localHashMap = new HashMap();
    localHashMap.put("listener", paramISubscribeEventListener);
    localHashMap.put("id", String.valueOf(paramInt));
    localHashMap.put("node", paramNode);
    Message localMessage = Message.obtain(this.mLoadHandler, 6, localHashMap);
    this.mLoadHandler.sendMessage(localMessage);
  }

  public void loadLiveProgramSchedule(Node paramNode, int paramInt, String paramString, ISubscribeEventListener paramISubscribeEventListener)
  {
    if (paramNode == null);
    do
    {
      String str;
      do
      {
        return;
        if (paramString == null)
          paramString = getProgramsScheduleDuration();
        if (paramISubscribeEventListener != null)
          registerSubscribeEventListener(paramISubscribeEventListener, "RPS");
        str = paramInt + "_" + paramString + "_" + "GET_LIVE_PROGRAM_SCHEDULE";
      }
      while (root().hasLoadUrls(str, false));
      HashMap localHashMap = new HashMap();
      localHashMap.put("id", String.valueOf(paramInt));
      localHashMap.put("day", paramString);
      localHashMap.put("use_time_stamp_cache", Boolean.valueOf(true));
      DataManager.getInstance().getData("GET_LIVE_PROGRAM_SCHEDULE", this, localHashMap);
    }
    while (paramNode == null);
    registerNodeEventListener(paramNode, "ADD_LIVE_PROGRAMS_SCHEDULE");
  }

  public void loadLiveSubCategoryNode(String paramString1, String paramString2, Node paramNode, ISubscribeEventListener paramISubscribeEventListener)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("listener", paramISubscribeEventListener);
    localHashMap.put("id", paramString1);
    localHashMap.put("type", paramString2);
    localHashMap.put("node", paramNode);
    Message localMessage = Message.obtain(this.mLoadHandler, 14, localHashMap);
    this.mLoadHandler.sendMessage(localMessage);
  }

  public void loadLocalCategory(ISubscribeEventListener paramISubscribeEventListener)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("use_time_stamp_cache", Boolean.valueOf(true));
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RECV_LOCAL_CATEGORY");
    DataManager.getInstance().getData("GET_LOCAL_CATEGORY", this, localHashMap);
  }

  public void loadOrderAllChannelNodes(int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean, ISubscribeEventListener paramISubscribeEventListener)
  {
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RECV_VIRTUAL_CHANNELS_BYATTR");
    String str = paramInt1 + "_" + paramInt2 + "_" + paramInt3 + "GET_ALL_CHANNELS";
    if (root().hasLoadUrls(str, paramBoolean))
      return;
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", String.valueOf(paramInt1));
    localHashMap.put("page", String.valueOf(paramInt2));
    localHashMap.put("pagesize", String.valueOf(paramInt3));
    localHashMap.put("use_time_stamp_cache", Boolean.valueOf(true));
    DataManager.getInstance().getData("GET_ALL_CHANNELS", this, localHashMap);
  }

  public void loadPodcasterBaseInfo(int paramInt, ISubscribeEventListener paramISubscribeEventListener)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", String.valueOf(paramInt));
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RECV_PODCASTER_BASEINFO");
    DataManager.getInstance().getData("GET_PODCASTER_BASEINFO", this, localHashMap);
  }

  public void loadPodcasterChannels(int paramInt, ISubscribeEventListener paramISubscribeEventListener)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", String.valueOf(paramInt));
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RECV_PODCASTER_CHANNELS");
    DataManager.getInstance().getData("GET_PODCASTER_CHANNELS", this, localHashMap);
  }

  public void loadPodcasterDetailInfo(int paramInt, ISubscribeEventListener paramISubscribeEventListener)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", String.valueOf(paramInt));
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RECV_PODCASTER_DETAILINFO");
    DataManager.getInstance().getData("GET_PODCASTER_DETAILINFO", this, localHashMap);
  }

  public void loadPodcasterLatestInfo(int paramInt, ISubscribeEventListener paramISubscribeEventListener)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", String.valueOf(paramInt));
    localHashMap.put("limit", String.valueOf(this.PODCASTER_RECENT_LIMIT_SIZE));
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RECV_PODCASTER_LATEST");
    DataManager.getInstance().getData("GET_PODCASTER_LATESTINFO", this, localHashMap);
  }

  public void loadProgramInfo(Node paramNode, int paramInt, ISubscribeEventListener paramISubscribeEventListener)
  {
    if (paramNode == null);
    while (!paramNode.nodeName.equalsIgnoreCase("channel"))
      return;
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", String.valueOf(paramInt));
    ((ChannelNode)paramNode).setLoadedProgramId(paramInt);
    if (paramNode != null)
      registerNodeEventListener(paramNode, "AVPI");
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RVPI");
    DataManager.getInstance().getData("GET_VIRTUAL_PROGRAM_INFO", this, localHashMap);
  }

  public void loadProgramsScheduleByRange(int paramInt1, int paramInt2, ISubscribeEventListener paramISubscribeEventListener)
  {
    int i = 1 + paramInt2 / NOVEL_PAGE_SIZE;
    String str = paramInt1 + "_" + i + "_" + NOVEL_PAGE_SIZE + "GET_VIRTUAL_PROGRAM_SCHEDULE";
    if (root().hasLoadUrls(str, false))
      return;
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", String.valueOf(paramInt1));
    localHashMap.put("pagesize", String.valueOf(NOVEL_PAGE_SIZE));
    localHashMap.put("page", String.valueOf(i));
    localHashMap.put("use_time_stamp_cache", Boolean.valueOf(true));
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RPS");
    DataManager.getInstance().getData("GET_VIRTUAL_PROGRAM_SCHEDULE", this, localHashMap);
  }

  public void loadProgramsScheduleNode(ChannelNode paramChannelNode, ISubscribeEventListener paramISubscribeEventListener)
  {
    if (paramChannelNode == null);
    while (paramChannelNode.isDownloadChannel())
      return;
    if (paramChannelNode.channelType == 0)
    {
      loadLiveProgramSchedule(ProgramHelper.getInstance(), paramChannelNode.channelId, null, paramISubscribeEventListener);
      return;
    }
    int i = paramChannelNode.getLoadedProgramSize() + this.ERROR_PROGRAM_CNT;
    if (paramChannelNode.isNovelChannel());
    for (int j = i / NOVEL_PAGE_SIZE; ; j = i / getProgramPageSize())
    {
      int k = j + 1;
      loadVirtualProgramsScheduleNode(ProgramHelper.getInstance(), paramChannelNode.channelId, paramChannelNode.isNovelChannel(), k, i, paramISubscribeEventListener);
      return;
    }
  }

  public void loadRadioInfo(String paramString)
  {
    if ((paramString == null) || (this.currentLocation == null));
    do
    {
      do
        return;
      while ((this.currentLocation.city == null) || (this.currentLocation.region == null));
      HashMap localHashMap = new HashMap();
      localHashMap.put("freq", paramString);
      localHashMap.put("country", "china");
      localHashMap.put("city", this.currentLocation.city);
      localHashMap.put("region", this.currentLocation.region);
      DataManager.getInstance().getData("get_radio_info", this, localHashMap);
    }
    while (this.mRootNode.mContentCategory.mLiveNode.mRadioNode == null);
    registerNodeEventListener(this.mRootNode.mContentCategory.mLiveNode.mRadioNode, "ARADIO");
  }

  public void loadRecommendInfo(int paramInt, ISubscribeEventListener paramISubscribeEventListener)
  {
    root();
    if ((paramInt == 0) && (SharedCfg.getInstance().getChooseStudent() == 1))
      paramInt = 531;
    String str = paramInt + "GET_RECOMMEND_INFO";
    if (root().hasLoadUrls(str, false))
      return;
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", String.valueOf(paramInt));
    localHashMap.put("listener", paramISubscribeEventListener);
    DataManager.getInstance().getData("GET_RECOMMEND_INFO", this, localHashMap);
    root();
    if (paramInt == 0)
      loadLocalRecommendInfo(paramISubscribeEventListener);
    Message localMessage = Message.obtain(this.mLoadHandler, 2, Integer.valueOf(paramInt));
    this.mLoadHandler.sendMessageDelayed(localMessage, 3000L);
  }

  public void loadRecommendPlayingProgramsInfo(ISubscribeEventListener paramISubscribeEventListener)
  {
    int i = Calendar.getInstance().get(7);
    HashMap localHashMap = new HashMap();
    localHashMap.put("day", String.valueOf(i));
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RRPPI");
    DataManager.getInstance().getData("GET_RECOMMEND_PLAYING", this, localHashMap);
  }

  public void loadRingToneList(ISubscribeEventListener paramISubscribeEventListener)
  {
    DataManager.getInstance().getData("get_ringtone_list", this, null);
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RRTNL");
  }

  public void loadSearch(String paramString, ISubscribeEventListener paramISubscribeEventListener)
  {
    if ((paramString == null) || (paramString.equalsIgnoreCase("")))
      return;
    root().mSearchNode.reset();
    root().mSearchNode.setLastKeyword(paramString);
    HashMap localHashMap = new HashMap();
    localHashMap.put("k", paramString);
    localHashMap.put("groups", "all");
    localHashMap.put("curpage", String.valueOf(1));
    localHashMap.put("pagesize", String.valueOf(this.SEARCH_PAGE_SIZE));
    localHashMap.put("deviceid", getInstance().getDeviceId());
    if (getInstance().getCurrentCity() == null)
      localHashMap.put("city", "");
    while (true)
    {
      if (paramISubscribeEventListener != null)
        registerSubscribeEventListener(paramISubscribeEventListener, "RSRL");
      DataManager.getInstance().getData("new_search", this, localHashMap);
      return;
      localHashMap.put("city", getInstance().getCurrentCity());
    }
  }

  public void loadSearchSuggestion(String paramString, ISubscribeEventListener paramISubscribeEventListener)
  {
    if ((paramString == null) || (paramString.equalsIgnoreCase("")))
      return;
    HashMap localHashMap = new HashMap();
    localHashMap.put("k", paramString);
    localHashMap.put("groups", "all");
    localHashMap.put("curpage", "1");
    localHashMap.put("pagesize", "5");
    localHashMap.put("deviceid", getInstance().getDeviceId());
    if (getInstance().getCurrentCity() == null)
      localHashMap.put("city", "");
    while (true)
    {
      if (paramISubscribeEventListener != null)
        registerSubscribeEventListener(paramISubscribeEventListener, "RSSUGG");
      DataManager.getInstance().getData("new_search_suggestion", this, localHashMap);
      return;
      localHashMap.put("city", getInstance().getCurrentCity());
    }
  }

  public void loadShareInfo(Node paramNode, ISubscribeEventListener paramISubscribeEventListener)
  {
    if (paramNode == null)
      return;
    HashMap localHashMap = new HashMap();
    localHashMap.put("listener", paramISubscribeEventListener);
    localHashMap.put("node", paramNode);
    Message localMessage = Message.obtain(this.mLoadHandler, 28, localHashMap);
    this.mLoadHandler.sendMessage(localMessage);
  }

  public void loadSpecialTopicNode(SpecialTopicNode paramSpecialTopicNode, ISubscribeEventListener paramISubscribeEventListener)
  {
    if (paramSpecialTopicNode == null)
      return;
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RECV_SPECIAL_TOPIC_CHANNELS");
    if (paramSpecialTopicNode != null)
      registerNodeEventListener(paramSpecialTopicNode, "ADD_SPECIAL_TOPIC");
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", String.valueOf(paramSpecialTopicNode.getApiId()));
    DataManager.getInstance().getData("GET_SPECIAL_TOPIC_CHANNELS", this, localHashMap);
  }

  public void loadSplashAdvertisement(ISubscribeEventListener paramISubscribeEventListener)
  {
    AdPos localAdPos = getInstance().root().mAdvertisementInfoNode.getSplashAdPos();
    if (localAdPos != null)
      loadAdvertisement(localAdPos, -1, paramISubscribeEventListener);
  }

  public void loadVirtualCategoryNodes(Node paramNode, ISubscribeEventListener paramISubscribeEventListener)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("listener", paramISubscribeEventListener);
    localHashMap.put("node", paramNode);
    Message localMessage = Message.obtain(this.mLoadHandler, 1, localHashMap);
    this.mLoadHandler.sendMessage(localMessage);
  }

  public void loadVirtualChannelNode(int paramInt, Node paramNode)
  {
    if (paramNode == null);
    String str;
    do
    {
      return;
      str = paramInt + "GET_VIRTUAL_CHANNEL_INFO";
    }
    while (root().hasLoadUrls(str, false));
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", String.valueOf(paramInt));
    DataManager.getInstance().getData("GET_VIRTUAL_CHANNEL_INFO", this, localHashMap);
    registerNodeEventListener(paramNode, "ADD_VIRTUAL_CHANNEL_INFO");
  }

  public void loadVirtualNode(ISubscribeEventListener paramISubscribeEventListener)
  {
    if (root().mContentCategory == null)
      return;
    HashMap localHashMap = new HashMap();
    localHashMap.put("listener", paramISubscribeEventListener);
    Message localMessage = Message.obtain(this.mLoadHandler, 17, localHashMap);
    this.mLoadHandler.sendMessage(localMessage);
  }

  public void loadVirtualProgramsScheduleNode(Node paramNode, int paramInt1, boolean paramBoolean, int paramInt2, int paramInt3, ISubscribeEventListener paramISubscribeEventListener)
  {
    int i = 30;
    if (paramBoolean)
      i = NOVEL_PAGE_SIZE;
    if (paramISubscribeEventListener != null)
      registerSubscribeEventListener(paramISubscribeEventListener, "RPS");
    String str = paramInt1 + "_" + paramInt2 + "_" + "GET_VIRTUAL_PROGRAM_SCHEDULE";
    if (root().hasLoadUrls(str, false))
      return;
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", String.valueOf(paramInt1));
    localHashMap.put("pagesize", String.valueOf(i));
    localHashMap.put("page", String.valueOf(paramInt2));
    localHashMap.put("use_time_stamp_cache", Boolean.valueOf(true));
    if (paramNode != null)
      registerNodeEventListener(paramNode, "ADD_VIRTUAL_PROGRAMS_SCHEDULE");
    DataManager.getInstance().getData("GET_VIRTUAL_PROGRAM_SCHEDULE", this, localHashMap);
  }

  public void loadWsqNew(String paramString)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("wid", paramString);
    DataManager.getInstance().getData("GET_WSQ_NEW", this, localHashMap);
  }

  public void onEvent(Object paramObject1, String paramString, Object paramObject2)
  {
    if (paramString.equalsIgnoreCase("betterlocation"))
      if (paramObject2 != null);
    while ((!paramString.equalsIgnoreCase("get_geo_success")) || (paramObject2 == null))
    {
      return;
      try
      {
        onRecvLocation((QTLocation)paramObject2);
        return;
      }
      catch (Exception localException2)
      {
        localException2.printStackTrace();
        return;
      }
    }
    try
    {
      onRecvLocation((QTLocation)paramObject2);
      return;
    }
    catch (Exception localException1)
    {
      localException1.printStackTrace();
    }
  }

  public void onRecvResult(Result paramResult, Object paramObject1, IResultToken paramIResultToken, Object paramObject2)
  {
    try
    {
      String str1 = paramIResultToken.getType();
      Map localMap5;
      int i;
      if (paramResult.getSuccess())
      {
        if (str1.equalsIgnoreCase("GET_LIST_CHANNELS"))
        {
          Map localMap10 = (Map)paramObject2;
          String str10 = paramResult.getCode();
          String str11 = paramResult.getMessage();
          if ((str10 != null) && (str11 != null))
          {
            localMap10.put("code", str10);
            localMap10.put("message", str11);
          }
          List localList19 = (List)paramResult.getData();
          if (localList19 == null)
            break label2624;
          dispatchNodeEvent(localList19, localMap10, "ADD_VIRTUAL_CHANNELS_BYATTR");
          dispatchSubscribeEvent("RECV_VIRTUAL_CHANNELS_BYATTR");
          return;
        }
        if (str1.equalsIgnoreCase("GET_AD_WHITE_LIST"))
        {
          List localList18 = (List)paramResult.getData();
          if (localList18 == null)
            break label2624;
          this.mLstAdWhite = localList18;
          return;
        }
        if (str1.equalsIgnoreCase("GET_LOCAL_CATEGORY"))
        {
          List localList17 = (List)paramResult.getData();
          if (localList17 == null)
            break label2624;
          root().mContentCategory.mVirtualNode.setLstLocalCategory(localList17);
          return;
        }
        if (str1.equalsIgnoreCase("GET_LOCAL_RECOMMEND_INFO"))
        {
          RecommendCategoryNode localRecommendCategoryNode2 = (RecommendCategoryNode)paramResult.getData();
          root().mLocalRecommendCategoryNode = localRecommendCategoryNode2;
          addLocalRecommendInfo();
          return;
        }
        if (str1.equalsIgnoreCase("GET_LIST_LIVE_CHANNELS"))
        {
          Map localMap9 = (Map)paramObject2;
          List localList16 = (List)paramResult.getData();
          if (localList16 == null)
            break label2624;
          dispatchNodeEvent(localList16, localMap9, "ADD_LIVE_CHANNELS_BYATTR");
          dispatchSubscribeEvent("RECV_LIVE_CHANNELS_BYATTR");
          return;
        }
        if (str1.equalsIgnoreCase("GET_QTIME_CONFIG"))
        {
          Map localMap8 = (Map)paramResult.getData();
          if (localMap8 == null)
            break label2624;
          this.qtimeConfig = ((Map)localMap8.get("config"));
          this.qtimeEntry = ((Map)localMap8.get("entry"));
          this.qtimeEntryType = ((Map)localMap8.get("entryType"));
          this.liveChannel = ((List)localMap8.get("live"));
          this.mall = ((Map)localMap8.get("mall"));
          this.h5_category = ((Map)localMap8.get("category"));
          this.h5_channel = ((Map)localMap8.get("channel"));
          this.h5_podcaster = ((Map)localMap8.get("podcaster"));
          this.h5_specialTopic = ((Map)localMap8.get("specialtopic"));
          if (enableGame())
            this.mLstGameBean = ((ArrayList)localMap8.get("game"));
          if (!LifeTime.isFirstLaunchAfterInstall)
            break label2624;
          ABTest.getInstance().sendH5ABTest();
          return;
        }
        if (str1.equalsIgnoreCase("GET_WSQ_NEW"))
        {
          Map localMap7 = (Map)paramResult.getData();
          Iterator localIterator = localMap7.keySet().iterator();
          while (localIterator.hasNext())
          {
            String str9 = (String)localIterator.next();
            this.wsqNew.put(str9, localMap7.get(str9));
          }
          dispatchSubscribeEvent("WSQNEW");
          return;
        }
        if (str1.equalsIgnoreCase("GET_LIST_MEDIACENTER"))
        {
          MediaCenter localMediaCenter = (MediaCenter)paramResult.getData();
          if (localMediaCenter == null)
            break label2624;
          MediaCenter.getInstance().setMediaCenter(localMediaCenter);
          MediaCenter.getInstance().pkMediaCenter();
          Message localMessage2 = new Message();
          localMessage2.what = 2;
          localMessage2.obj = null;
          getInstance().getDataStoreHandler().sendMessage(localMessage2);
          return;
        }
        if (str1.equalsIgnoreCase("GET_LIST_CATEGORIES"))
        {
          List localList15 = (List)paramResult.getData();
          if (localList15 == null)
            break label2624;
          root().mContentCategory.mVirtualNode.updateVirtualCategory(localList15);
          return;
        }
        if (str1.equalsIgnoreCase("get_current_playing_programs"))
        {
          List localList14 = (List)paramResult.getData();
          if (localList14.size() == 0)
            break label2624;
          dispatchNodeEvent(localList14, "ACPP");
          dispatchSubscribeEvent("RCPPL");
          return;
        }
        if (str1.equalsIgnoreCase("GET_ADV_FROM_AIRWAVE"))
        {
          RecommendItemNode localRecommendItemNode = (RecommendItemNode)paramResult.getData();
          if (localRecommendItemNode == null)
            break label2624;
          ThirdAdv.getInstance().setAdv(localRecommendItemNode);
          return;
        }
        if (str1.equalsIgnoreCase("GET_CATEGORY_ATTRS"))
        {
          List localList13 = (List)paramResult.getData();
          if (localList13 == null)
            break label2624;
          dispatchNodeEvent(localList13, (Map)paramObject2, "ADD_CATEGORY_ATTR");
          dispatchSubscribeEvent("RECV_ATTRIBUTES");
          return;
        }
        if (str1.equalsIgnoreCase("GET_ALL_CHANNELS"))
        {
          Map localMap6 = (Map)paramObject2;
          String str7 = paramResult.getCode();
          String str8 = paramResult.getMessage();
          if ((str7 != null) && (str8 != null))
          {
            localMap6.put("code", str7);
            localMap6.put("message", str8);
          }
          List localList12 = (List)paramResult.getData();
          if (localList12 == null)
            break label2624;
          dispatchNodeEvent(localList12, localMap6, "ADD_CATEGORY_ALL_CHANNELS");
          dispatchSubscribeEvent("RECV_VIRTUAL_CHANNELS_BYATTR");
          return;
        }
        if (str1.equalsIgnoreCase("GET_LIVE_CHANNEL_INFO"))
        {
          ChannelNode localChannelNode2 = (ChannelNode)paramResult.getData();
          if (localChannelNode2 == null)
            break label2624;
          dispatchNodeEvent(localChannelNode2, "ADD_LIVE_CHANNEL_INFO");
          return;
        }
        if (str1.equalsIgnoreCase("GET_VIRTUAL_PROGRAM_INFO"))
        {
          ProgramNode localProgramNode = (ProgramNode)paramResult.getData();
          if (localProgramNode == null)
            break label2624;
          dispatchNodeEvent(localProgramNode, "AVPI");
          dispatchSubscribeEvent("RVPI");
          return;
        }
        if (str1.equalsIgnoreCase("GET_VIRTUAL_CHANNEL_INFO"))
        {
          ChannelNode localChannelNode1 = (ChannelNode)paramResult.getData();
          if (localChannelNode1 == null)
            break label2624;
          dispatchNodeEvent(localChannelNode1, "ADD_VIRTUAL_CHANNEL_INFO");
          return;
        }
        if (str1.equalsIgnoreCase("GET_LIVE_PROGRAM_SCHEDULE"))
        {
          ProgramScheduleList localProgramScheduleList3 = (ProgramScheduleList)paramResult.getData();
          if (localProgramScheduleList3 == null)
            break label2624;
          dispatchNodeEvent(localProgramScheduleList3, (Map)paramObject2, "ADD_LIVE_PROGRAMS_SCHEDULE");
          dispatchSubscribeEvent("RPS");
          return;
        }
        if (str1.equalsIgnoreCase("GET_VIRTUAL_PROGRAM_SCHEDULE"))
        {
          ProgramScheduleList localProgramScheduleList2 = (ProgramScheduleList)paramResult.getData();
          if (localProgramScheduleList2 == null)
            break label2624;
          dispatchNodeEvent(localProgramScheduleList2, (Map)paramObject2, "ADD_VIRTUAL_PROGRAMS_SCHEDULE");
          dispatchSubscribeEvent("RPS");
          return;
        }
        if (str1.equalsIgnoreCase("RELOAD_VIRTUAL_PROGRAMS_SCHEDULE"))
        {
          ProgramScheduleList localProgramScheduleList1 = (ProgramScheduleList)paramResult.getData();
          if (localProgramScheduleList1 == null)
            break label2624;
          dispatchNodeEvent(localProgramScheduleList1, (Map)paramObject2, "ADD_RELOAD_VIRTUAL_PROGRAMS_SCHEDULE");
          dispatchSubscribeEvent("RECV_RELOAD_PROGRAMS_SCHEDULE");
          return;
        }
        if (str1.equalsIgnoreCase("GET_RECOMMEND_INFO"))
        {
          localMap5 = (Map)paramObject2;
          i = Integer.valueOf((String)localMap5.get("id")).intValue();
          if ((i != 531) || (SharedCfg.getInstance().getChooseStudent() != 1))
            break label2617;
        }
      }
      label2617: for (int j = 0; ; j = i)
      {
        ISubscribeEventListener localISubscribeEventListener = (ISubscribeEventListener)localMap5.get("listener");
        RecommendCategoryNode localRecommendCategoryNode1 = (RecommendCategoryNode)paramResult.getData();
        if (localRecommendCategoryNode1 == null)
          break;
        localRecommendCategoryNode1.sectionId = j;
        localRecommendCategoryNode1.hasUpdate = true;
        localRecommendCategoryNode1.insertBannerAdvertisement();
        if (localRecommendCategoryNode1.isFrontpage())
        {
          root().mNewFrontPageNode = localRecommendCategoryNode1;
          addLocalRecommendInfo();
        }
        while (true)
        {
          if (localISubscribeEventListener != null)
            localISubscribeEventListener.onNotification("RECV_RECOMMEND_INFO");
          Message localMessage1 = new Message();
          localMessage1.what = 4;
          localMessage1.obj = localRecommendCategoryNode1;
          getInstance().getDataStoreHandler().sendMessage(localMessage1);
          return;
          root().mapRecommendCategory.put(Integer.valueOf(j), localRecommendCategoryNode1);
        }
        if (str1.equalsIgnoreCase("GET_BILLBOARD_PROGRAMS"))
        {
          List localList11 = (List)paramResult.getData();
          if (localList11 == null)
            break;
          dispatchNodeEvent(localList11, "ABCS");
          dispatchSubscribeEvent("RBCS");
          return;
        }
        if (str1.equalsIgnoreCase("GET_BILLBOARD_CHANNELS"))
        {
          List localList10 = (List)paramResult.getData();
          if (localList10 == null)
            break;
          dispatchNodeEvent(localList10, "ABPS");
          dispatchSubscribeEvent("RBPS");
          return;
        }
        if (str1.equalsIgnoreCase("GET_RECOMMEND_PLAYING"))
        {
          List localList9 = (List)paramResult.getData();
          if (localList9 == null)
            break;
          root().mRecommendPlayingInfo.setRecommendList(localList9);
          dispatchSubscribeEvent("RRPPI");
          return;
        }
        if (str1.equalsIgnoreCase("GET_PODCASTER_BASEINFO"))
        {
          UserInfo localUserInfo = (UserInfo)paramResult.getData();
          if (localUserInfo == null)
            break;
          dispatchNodeEvent(localUserInfo, (Map)paramObject2, "ADD_PODCASTER_BASE");
          dispatchSubscribeEvent("RECV_PODCASTER_BASEINFO");
          return;
        }
        if (str1.equalsIgnoreCase("GET_PODCASTER_CHANNELS"))
        {
          List localList8 = (List)paramResult.getData();
          if (localList8 == null)
            break;
          dispatchNodeEvent(localList8, (Map)paramObject2, "ADD_PODCASTER_CHANNELS");
          dispatchSubscribeEvent("RECV_PODCASTER_CHANNELS");
          return;
        }
        if (str1.equalsIgnoreCase("GET_PODCASTER_DETAILINFO"))
          break;
        if (str1.equalsIgnoreCase("GET_PODCASTER_LATESTINFO"))
        {
          List localList7 = (List)paramResult.getData();
          if (localList7 == null)
            break;
          dispatchNodeEvent(localList7, (Map)paramObject2, "ADD_PODCASTER_LATEST");
          dispatchSubscribeEvent("RECV_PODCASTER_LATEST");
          return;
        }
        if (str1.equalsIgnoreCase("new_search"))
        {
          SearchNode localSearchNode = (SearchNode)paramResult.getData();
          if (localSearchNode == null)
            break;
          getInstance().root().mSearchNode.setSearchResult(localSearchNode);
          dispatchSubscribeEvent("RSRL");
          return;
        }
        if (str1.equalsIgnoreCase("new_search_suggestion"))
        {
          getInstance().root().mSearchNode.setSuggestions((List)paramResult.getData());
          dispatchSubscribeEvent("RSSUGG");
          return;
        }
        if (str1.equalsIgnoreCase("GET_LIST_LIVE_CATEGORIES"))
        {
          List localList6 = (List)paramResult.getData();
          if (localList6 == null)
            break;
          root().mContentCategory.mLiveNode.updateLiveCategory(localList6);
          return;
        }
        if (str1.equalsIgnoreCase("GET_AD_POS"))
        {
          List localList5 = (List)paramResult.getData();
          if (localList5 == null)
            break;
          getInstance().root().mAdvertisementInfoNode.setLstAdsPos(localList5);
          loadSplashAdvertisement(null);
          return;
        }
        if (str1.equalsIgnoreCase("GET_AD_INFO"))
        {
          Map localMap4 = (Map)paramObject2;
          String str6 = (String)localMap4.get("zone");
          AdvertisementItemNode localAdvertisementItemNode2 = (AdvertisementItemNode)paramResult.getData();
          if (localAdvertisementItemNode2 == null)
            break;
          getInstance().root().mAdvertisementInfoNode.addAdvertisement(str6, localAdvertisementItemNode2);
          dispatchNodeEvent(localAdvertisementItemNode2, localMap4, "ADD_ADVERTISEMENT_INFO");
          dispatchSubscribeEvent("RADI");
          return;
        }
        if (str1.equalsIgnoreCase("GET_AD_INFO_BYCHANNEL"))
        {
          Map localMap3 = (Map)paramObject2;
          String str5 = (String)localMap3.get("zone");
          AdvertisementItemNode localAdvertisementItemNode1 = (AdvertisementItemNode)paramResult.getData();
          if (localAdvertisementItemNode1 == null)
            break;
          getInstance().root().mAdvertisementInfoNode.addAdvertisement(str5, localAdvertisementItemNode1);
          dispatchNodeEvent(localAdvertisementItemNode1, localMap3, "ADD_ADVERTISEMENT_INFO");
          return;
        }
        if (str1.equalsIgnoreCase("GET_AD_CONFIG"))
        {
          List localList4 = (List)paramResult.getData();
          if (localList4 == null)
            break;
          getInstance().root().mAdvertisementInfoNode.setADConfigs(localList4);
          return;
        }
        if (str1.equalsIgnoreCase("GET_AM_AD_CONFIG"))
        {
          List localList3 = (List)paramResult.getData();
          if (localList3 == null)
            break;
          getInstance().root().mAdvertisementInfoNode.setADAMConfigs(localList3);
          return;
        }
        if (str1.equalsIgnoreCase("GET_SPECIAL_TOPIC_CHANNELS"))
        {
          Map localMap2 = (Map)paramObject2;
          SpecialTopicNode localSpecialTopicNode = (SpecialTopicNode)paramResult.getData();
          if (localSpecialTopicNode == null)
            break;
          List localList2 = localSpecialTopicNode.getlstChannels();
          if ((localList2 != null) && (localList2.size() > 0))
            dispatchNodeEvent(localList2, localMap2, "ADD_SPECIAL_TOPIC_CHANNELS");
          dispatchNodeEvent(localSpecialTopicNode, localMap2, "ADD_SPECIAL_TOPIC");
          dispatchSubscribeEvent("RECV_SPECIAL_TOPIC_CHANNELS");
          return;
        }
        if (str1.equalsIgnoreCase("get_ip_location"))
        {
          QTLocation localQTLocation = (QTLocation)paramResult.getData();
          if (localQTLocation == null)
            break;
          onRecvLocation(localQTLocation);
          root().mContentCategory.mVirtualNode.addLocalCategory();
          if (getInstance().advLocation == null)
            break;
          String str4 = getInstance().advLocation.city;
          if ((localQTLocation.city == null) || (str4 == null))
            break;
          if (localQTLocation.city.contains(str4))
          {
            MobclickAgent.onEvent(this.mContext, "iploc", "0");
            return;
          }
          MobclickAgent.onEvent(this.mContext, "iploc", "1");
          return;
        }
        if (str1.equalsIgnoreCase("GET_AD_LOCATION"))
        {
          QTADLocation localQTADLocation = (QTADLocation)paramResult.getData();
          if (localQTADLocation == null)
            break;
          getInstance().advLocation = localQTADLocation;
          MediaCenter.getInstance().setRegion(localQTADLocation.regionCode);
          if ((localQTADLocation.school != null) && (!localQTADLocation.school.equalsIgnoreCase("")))
          {
            if (localQTADLocation.school.length() % 2 != 0)
              break label2415;
            QTMSGManage.getInstance().sendStatistcsMessage("advloc", localQTADLocation.school);
          }
          while (true)
          {
            if (getInstance().currentLocation == null)
              break label2624;
            String str3 = getInstance().currentLocation.city;
            if ((localQTADLocation.city == null) || (str3 == null))
              break label2624;
            if (!localQTADLocation.city.contains(str3))
              break;
            MobclickAgent.onEvent(this.mContext, "iploc", "0");
            return;
            label2415: QTMSGManage.getInstance().sendStatistcsMessage("advloc1", localQTADLocation.school);
          }
          MobclickAgent.onEvent(this.mContext, "iploc", "1");
          return;
        }
        if (!str1.equalsIgnoreCase("hot_search_keywords"))
          break;
        List localList1 = (List)paramResult.getData();
        getInstance().root().mSearchNode.setHotKeywords(localList1);
        dispatchSubscribeEvent("RSHK");
        return;
        if (str1.equalsIgnoreCase("GET_AD_INFO"))
        {
          Map localMap1 = (Map)paramObject2;
          if (localMap1 == null)
            break;
          String str2 = (String)localMap1.get("zone");
          AdPos localAdPos = getInstance().root().mAdvertisementInfoNode.getSplashAdPos();
          if ((localAdPos == null) || (str2 == null) || (localAdPos.posid == null) || (!localAdPos.posid.equalsIgnoreCase(str2)))
            break;
          SharedCfg.getInstance().setLocalAdvertisementPic("");
          return;
        }
        if (paramResult.getCode().equalsIgnoreCase(DataError.DATA_304.getCode()))
        {
          dispatchSubscribeEvent(str1, DataExceptionStatus.Status304);
          return;
        }
        dispatchSubscribeEvent(str1, DataExceptionStatus.Timeout);
        return;
      }
      label2624: return;
    }
    catch (Exception localException)
    {
    }
  }

  public void putUpdateTime(String paramString, long paramLong)
  {
    TimeBean localTimeBean = (TimeBean)this.mChannelsTiming.get(paramString);
    if (localTimeBean == null);
    while (localTimeBean.getUpdateTime() >= paramLong)
      return;
    localTimeBean.setUpdateTime(paramLong);
    this.mNeedWrite = true;
  }

  public void registerNodeEventListener(INodeEventListener paramINodeEventListener, String paramString)
  {
    List localList;
    int i;
    if ((paramINodeEventListener != null) && (paramString != null))
    {
      if (!this.mapNodeEventListeners.containsKey(paramString))
        break label229;
      localList = (List)this.mapNodeEventListeners.get(paramString);
      i = 0;
      if (i >= localList.size())
        break label208;
      if (localList.get(i) != paramINodeEventListener);
    }
    else
    {
      return;
    }
    Node localNode1 = (Node)paramINodeEventListener;
    Node localNode2 = (Node)localList.get(i);
    if ((localNode1.nodeName.equalsIgnoreCase("category")) && (localNode2.nodeName.equalsIgnoreCase("category")))
      if (((CategoryNode)localNode1).categoryId == ((CategoryNode)localNode2).categoryId)
        localList.remove(i);
    while (true)
    {
      i++;
      break;
      if ((localNode1.nodeName.equalsIgnoreCase("channel")) && (localNode2.nodeName.equalsIgnoreCase("channel")) && (((ChannelNode)localNode1).channelId == ((ChannelNode)localNode2).channelId))
        localList.remove(i);
    }
    label208: ((List)this.mapNodeEventListeners.get(paramString)).add(paramINodeEventListener);
    return;
    label229: ArrayList localArrayList = new ArrayList();
    localArrayList.add(paramINodeEventListener);
    this.mapNodeEventListeners.put(paramString, localArrayList);
  }

  public void registerSubscribeEventListener(ISubscribeEventListener paramISubscribeEventListener, String paramString)
  {
    List localList;
    if ((paramISubscribeEventListener != null) && (paramString != null))
    {
      if (this.mapSubscribeEventListeners.containsKey(paramString))
        localList = (List)this.mapSubscribeEventListeners.get(paramString);
    }
    else
    {
      for (int i = 0; i < localList.size(); i++)
        if (localList.get(i) == paramISubscribeEventListener)
          return;
      ((List)this.mapSubscribeEventListeners.get(paramString)).add(paramISubscribeEventListener);
      return;
    }
    ArrayList localArrayList = new ArrayList();
    localArrayList.add(paramISubscribeEventListener);
    this.mapSubscribeEventListeners.put(paramString, localArrayList);
  }

  public void registerViewTime(ISubscribeEventListener paramISubscribeEventListener)
  {
    this.viewTimeListener.add(new WeakReference(paramISubscribeEventListener));
  }

  public void reloadVirtualProgramsSchedule(ChannelNode paramChannelNode, ISubscribeEventListener paramISubscribeEventListener)
  {
    if (paramChannelNode == null)
      return;
    HashMap localHashMap = new HashMap();
    localHashMap.put("id", String.valueOf(paramChannelNode.channelId));
    if (paramChannelNode.isNovelChannel())
      localHashMap.put("pagesize", String.valueOf(NOVEL_PAGE_SIZE));
    while (true)
    {
      localHashMap.put("page", String.valueOf(1));
      registerNodeEventListener(ProgramHelper.getInstance(), "ADD_RELOAD_VIRTUAL_PROGRAMS_SCHEDULE");
      if (paramISubscribeEventListener != null)
        registerSubscribeEventListener(paramISubscribeEventListener, "RECV_RELOAD_PROGRAMS_SCHEDULE");
      DataManager.getInstance().getData("RELOAD_VIRTUAL_PROGRAMS_SCHEDULE", this, localHashMap);
      return;
      localHashMap.put("pagesize", String.valueOf(30));
    }
  }

  public void removeTime(String paramString)
  {
    if ((TimeBean)this.mChannelsTiming.remove(paramString) != null)
      this.mNeedWrite = true;
  }

  public void reset()
  {
    if (this.mRootNode != null)
    {
      if (enableGenerateDB())
        this.mRootNode.mContentCategory.saveChildToDB();
      if ((this.mRootNode.mContentCategory.mLiveNode != null) && (this.mRootNode.mContentCategory.mLiveNode.mRadioNode != null))
      {
        this.mRootNode.mContentCategory.mLiveNode.mRadioNode.saveFreqChannelToDB();
        this.mRootNode.mContentCategory.mLiveNode.mRadioNode.saveToDB();
      }
    }
    clearAllRegisterListeners();
    unBindService();
  }

  public RootNode root()
  {
    return this.mRootNode;
  }

  public void runSellApps()
  {
    if (!enableSellApps())
      return;
    this.mHasSellApp = true;
    new HttpDownloadHelper(this.mContext, null, this.mSellAppsInfo, "1.apk", true).start();
  }

  public boolean saveBattery()
  {
    if (this.mContext == null)
      return false;
    return SharedCfg.getInstance().getSaveBattery();
  }

  public void saveChannelsTime()
  {
    if (this.mNeedWrite)
    {
      this.mTimingDB.save(this.mChannelsTiming);
      this.mNeedWrite = false;
    }
  }

  public void saveMsgSeq()
  {
    if (this.msgSeq > 0L)
      GlobalCfg.getInstance(this.mContext).setMsgSeq(this.msgSeq);
  }

  public void savePersonalData()
  {
    if (this.mRootNode != null)
    {
      this.mRootNode.saveFavToDB();
      if ((this.mRootNode.mContentCategory != null) && (this.mRootNode.mContentCategory.mLiveNode != null) && (this.mRootNode.mContentCategory.mLiveNode.mRadioNode != null))
        this.mRootNode.mContentCategory.mLiveNode.mRadioNode.saveToDB();
    }
  }

  public void savePersonalOtherToDB()
  {
    this.mRootNode.savePersonalContentToDB();
  }

  public void sendAvailAlarmCnt()
  {
    if ((this.mRootNode == null) || (this.mRootNode.mPersonalCenterNode == null) || (this.mRootNode.mPersonalCenterNode.alarmInfoNode == null) || (this.mContext == null));
    while (true)
    {
      return;
      List localList = this.mRootNode.mPersonalCenterNode.alarmInfoNode.mLstAlarms;
      if ((localList != null) && (localList.size() != 0))
        for (int i = 0; i < localList.size(); i++)
        {
          long l = ((AlarmInfo)localList.get(i)).getNextShoutTime() + System.currentTimeMillis() / 1000L;
          if ((l > 0L) && (l < getEndDayTime()))
            QTMSGManage.getInstance().sendStatisticsMessageOnceADay("ClockWillActive");
        }
    }
  }

  public void sendPlayList(String paramString1, String paramString2)
  {
    if ((this.mContext == null) || (paramString1 == null))
      return;
    Intent localIntent = new Intent();
    localIntent.setAction("android.intent.action.UPDATE_PLAY_INFO_QT");
    localIntent.putExtra(paramString1, paramString2);
    this.mContext.sendBroadcast(localIntent);
  }

  public void sendPlayThumb(Bitmap paramBitmap, int paramInt)
  {
    if ((this.mContext == null) || (paramBitmap == null))
      return;
    Log.e("infomanager", "sendplaythumb for refresh: " + paramBitmap + " " + paramInt);
    Intent localIntent = new Intent();
    localIntent.setAction("android.intent.action.UPDATE_PLAY_INFO_QT");
    localIntent.putExtra("playingthumb", paramBitmap);
    localIntent.putExtra("playingchannel", paramInt);
    this.mContext.sendBroadcast(localIntent);
  }

  public void setADVLoc(boolean paramBoolean)
  {
    this.enableADVLocation = paramBoolean;
  }

  public void setAchilles(boolean paramBoolean)
  {
    this.mAchilles = paramBoolean;
  }

  public void setAchillesPercent(String paramString)
  {
    String[] arrayOfString;
    if ((paramString != null) && (!paramString.equalsIgnoreCase("")) && (!paramString.equalsIgnoreCase("#")))
    {
      this.mAchillesLstPercents = new ArrayList();
      arrayOfString = paramString.split(";;");
      if (arrayOfString != null)
        break label48;
    }
    while (true)
    {
      return;
      label48: for (int i = 0; i < arrayOfString.length; i++)
        this.mAchillesLstPercents.add(Integer.valueOf(arrayOfString[i]));
    }
  }

  public void setAchillesUrl(String paramString)
  {
    String[] arrayOfString;
    if ((paramString != null) && (!paramString.equalsIgnoreCase("")) && (!paramString.equalsIgnoreCase("#")))
    {
      this.mAchillesLstUrls = new ArrayList();
      arrayOfString = paramString.split(";;");
      if (arrayOfString != null)
        break label48;
    }
    while (true)
    {
      return;
      label48: for (int i = 0; i < arrayOfString.length; i++)
        this.mAchillesLstUrls.add(arrayOfString[i]);
    }
  }

  public void setAddGroupSlogan(String paramString)
  {
    if ((paramString != null) && (!paramString.equalsIgnoreCase("")))
      this.mAddGroupSlogan = paramString;
  }

  public void setAdvertisementRadio(int paramInt)
  {
    this.mShowAdvertisementRatio = paramInt;
  }

  public void setAirWaveClick(int paramInt)
  {
    this.mEnableAirWaveClick = paramInt;
  }

  public void setAirWaveShow(int paramInt)
  {
    this.mEnableAirWaveShow = paramInt;
  }

  public void setAllowDownloadMusic(String paramString)
  {
    this.allowDownloadMusic = paramString;
  }

  public void setAppDesc(String paramString)
  {
    this.mAppleDesc = paramString;
  }

  public void setAppImage(String paramString)
  {
    this.mAppleImage = paramString;
  }

  public void setAppleUrl(String paramString)
  {
    this.mAppleUrl = paramString;
  }

  public void setAthenaLife(String paramString)
  {
    this.mAthenaLife = Integer.valueOf(paramString).intValue();
  }

  public void setAudioAdv(boolean paramBoolean)
  {
    this.mEnableAudioAdv = paramBoolean;
  }

  public void setAudioQualitySetting(AUDIO_QUALITY_MODE paramAUDIO_QUALITY_MODE)
  {
    int i = this.mAudioQualitySetting;
    int j = paramAUDIO_QUALITY_MODE.ordinal();
    int k = 0;
    String str;
    if (i != j)
    {
      if (!hasWifi())
        break label173;
      if (this.mAudioQualitySetting == AUDIO_QUALITY_MODE.HIGH_QUALITY.ordinal())
      {
        AUDIO_QUALITY_MODE localAUDIO_QUALITY_MODE5 = AUDIO_QUALITY_MODE.SMART;
        k = 0;
        if (paramAUDIO_QUALITY_MODE != localAUDIO_QUALITY_MODE5);
      }
    }
    else
    {
      this.mAudioQualitySetting = paramAUDIO_QUALITY_MODE.ordinal();
      SharedCfg.getInstance().setAudioQualitySetting(this.mAudioQualitySetting);
      if (paramAUDIO_QUALITY_MODE != AUDIO_QUALITY_MODE.SMART)
        break label233;
      str = "己切换至智能模式";
    }
    while (true)
    {
      if (str != null)
        Toast.makeText(this.mContext, str, 1).show();
      if ((k != 0) && (PlayerAgent.getInstance().isPlaying()))
      {
        Node localNode = getInstance().root().getCurrentPlayingNode();
        PlayerAgent.getInstance().stop();
        PlayerAgent.getInstance().play(localNode);
      }
      return;
      if (this.mAudioQualitySetting == AUDIO_QUALITY_MODE.SMART.ordinal())
      {
        AUDIO_QUALITY_MODE localAUDIO_QUALITY_MODE4 = AUDIO_QUALITY_MODE.HIGH_QUALITY;
        k = 0;
        if (paramAUDIO_QUALITY_MODE == localAUDIO_QUALITY_MODE4)
          break;
      }
      k = 1;
      break;
      label173: if (this.mAudioQualitySetting == AUDIO_QUALITY_MODE.LOW_QUALITY.ordinal())
      {
        AUDIO_QUALITY_MODE localAUDIO_QUALITY_MODE3 = AUDIO_QUALITY_MODE.SMART;
        k = 0;
        if (paramAUDIO_QUALITY_MODE == localAUDIO_QUALITY_MODE3)
          break;
      }
      if (this.mAudioQualitySetting == AUDIO_QUALITY_MODE.SMART.ordinal())
      {
        AUDIO_QUALITY_MODE localAUDIO_QUALITY_MODE2 = AUDIO_QUALITY_MODE.LOW_QUALITY;
        k = 0;
        if (paramAUDIO_QUALITY_MODE == localAUDIO_QUALITY_MODE2)
          break;
      }
      k = 1;
      break;
      label233: if (paramAUDIO_QUALITY_MODE == AUDIO_QUALITY_MODE.HIGH_QUALITY)
      {
        str = "己切换至高音质模式";
      }
      else
      {
        AUDIO_QUALITY_MODE localAUDIO_QUALITY_MODE1 = AUDIO_QUALITY_MODE.LOW_QUALITY;
        str = null;
        if (paramAUDIO_QUALITY_MODE == localAUDIO_QUALITY_MODE1)
          str = "己切换至流畅模式";
      }
    }
  }

  public void setAutoPlayAfterStart(boolean paramBoolean)
  {
    SharedCfg.getInstance().setAutoPlayAfterStart(paramBoolean);
    if (paramBoolean)
      MobclickAgent.onEvent(this.mContext, "setAutoPlayAfterStart", "true");
  }

  public void setAutoReserveMinDuration(int paramInt)
  {
    if (this.mContext == null)
      return;
    this.mAutoReserveMinDuration = paramInt;
    SharedCfg.getInstance().setAutoReserveDuration(paramInt);
  }

  public void setAutoSeek(boolean paramBoolean)
  {
    if (this.mContext == null)
      return;
    this.mAutoSeek = paramBoolean;
    SharedCfg.getInstance().setAutoSeek(paramBoolean);
  }

  public void setBarrage(String paramString)
  {
    this.enableBarrage = paramString;
  }

  public void setBindRecommendShare(boolean paramBoolean)
  {
    this.mBindRecommendShare = paramBoolean;
  }

  public void setChatroom(String paramString)
  {
    this.mChatroom = paramString;
  }

  public void setChinaUnicomZone(boolean paramBoolean)
  {
    this.mChinaUnicomZone = paramBoolean;
  }

  public void setChooseGender(int paramInt)
  {
    SharedCfg.getInstance().setChooseGender(paramInt);
  }

  public void setContext(Context paramContext)
  {
    this.mContext = paramContext;
  }

  public void setCurrLiveRoomId(String paramString)
  {
    this.currLiveRoomId = paramString;
  }

  public void setDefaultCollectionChannelId(String paramString1, String paramString2)
  {
    String[] arrayOfString1;
    if ((paramString1 != null) && (!paramString1.equalsIgnoreCase("")) && (!paramString1.equalsIgnoreCase("#")) && (paramString2 != null) && (!paramString2.equalsIgnoreCase("")) && (!paramString2.equalsIgnoreCase("#")))
    {
      arrayOfString1 = paramString1.split(";;");
      if (arrayOfString1 != null)
        break label61;
    }
    while (true)
    {
      return;
      label61: String[] arrayOfString2 = paramString2.split(";;");
      if (arrayOfString2 != null)
        for (int i = 0; i < arrayOfString1.length; i++)
          if ((arrayOfString1[i].equalsIgnoreCase(AppInfo.getChannelName(this.mContext))) && (i < arrayOfString2.length))
          {
            this.defaultCollectionChannelId = Integer.valueOf(arrayOfString2[i]).intValue();
            addDefaultCollection(this.defaultCollectionChannelId);
            return;
          }
    }
  }

  public void setDefaultSpecialTopic(String paramString1, String paramString2)
  {
    String[] arrayOfString1;
    if ((paramString1 != null) && (!paramString1.equalsIgnoreCase("")) && (!paramString1.equalsIgnoreCase("#")) && (paramString2 != null) && (!paramString2.equalsIgnoreCase("")) && (!paramString2.equalsIgnoreCase("#")))
    {
      arrayOfString1 = paramString1.split(";;");
      if (arrayOfString1 != null)
        break label61;
    }
    while (true)
    {
      return;
      label61: String[] arrayOfString2 = paramString2.split(";;");
      if (arrayOfString2 != null)
        for (int i = 0; i < arrayOfString1.length; i++)
          if ((arrayOfString1[i].equalsIgnoreCase(AppInfo.getChannelName(this.mContext))) && (i < arrayOfString2.length))
          {
            this.defaultSpecialTopicId = Integer.valueOf(arrayOfString2[i]).intValue();
            return;
          }
    }
  }

  public void setDeviceId(String paramString)
  {
    this.mDeviceId = paramString;
  }

  public void setEnablGame(boolean paramBoolean)
  {
    this.mEnableGame = paramBoolean;
  }

  public void setEnableAutoSeek(boolean paramBoolean)
  {
    if (this.mContext == null)
      return;
    this.mEnableSeek = paramBoolean;
    SharedCfg.getInstance().setAutoSeek(paramBoolean);
  }

  public void setEnableBillboard(boolean paramBoolean)
  {
  }

  public void setEnableCustomCategory(boolean paramBoolean)
  {
    this.mEnableCustomCategory = paramBoolean;
  }

  public void setEnableDefaultCollection(boolean paramBoolean)
  {
    if (this.mContext == null)
      return;
    SharedCfg.getInstance().setDefaultCollection(paramBoolean);
  }

  public void setEnableFrontCollection(boolean paramBoolean)
  {
    this.mFrontCollection = paramBoolean;
  }

  public void setEnableH5(boolean paramBoolean)
  {
    this.mEnabelH5 = paramBoolean;
  }

  public void setEnableIRE(boolean paramBoolean)
  {
    this.mEnableIRE = paramBoolean;
  }

  public void setEnableMediaControll(boolean paramBoolean)
  {
    if (this.mContext == null)
      return;
    SharedCfg.getInstance().setEnableMediaControll(paramBoolean);
    GlobalCfg.getInstance(this.mContext).setMediaControll(paramBoolean);
  }

  public void setEnableNewCDN(boolean paramBoolean)
  {
    this.mEnableNewCDN = paramBoolean;
  }

  public void setEnableNewCheckin(int paramInt)
  {
    this.mNewCheckin = paramInt;
  }

  public void setEnablePingan(boolean paramBoolean)
  {
    this.mEnablePingAN = paramBoolean;
  }

  public void setEnableProgramABTest(boolean paramBoolean)
  {
    this.mEnabelProgramABTest = paramBoolean;
  }

  public void setEnableSetDNS(boolean paramBoolean)
  {
    this.mEnableSetDNS = paramBoolean;
  }

  public void setEnableSocial(String paramString)
  {
    this.mEnableGroup = paramString;
  }

  public void setEnableTBMagic(boolean paramBoolean)
  {
    this.mEnableTBMagic = paramBoolean;
  }

  public void setEnableWoQt(boolean paramBoolean)
  {
    this.mEnableWoQt = paramBoolean;
  }

  public void setForceLogin(boolean paramBoolean)
  {
    this.mForceLogin = paramBoolean;
  }

  public void setInBackground(boolean paramBoolean)
  {
    this.mInBackground = paramBoolean;
  }

  public void setJDClick(int paramInt)
  {
    this.jdClick = paramInt;
  }

  public void setJDShow(int paramInt)
  {
    this.jdShow = paramInt;
  }

  public void setJdAdPosition(String paramString)
  {
    try
    {
      this.mJdAdPosition = (-1 + Integer.parseInt(paramString));
      return;
    }
    catch (Exception localException)
    {
      this.mJdAdPosition = 4;
    }
  }

  public void setLinkDuration(int paramInt)
  {
    this.linkDuration = paramInt;
  }

  public void setLiveRoomBlack(String paramString)
  {
    this.mLiveRoomBlack = paramString;
  }

  public void setMaxWordsInLiveRoom(int paramInt)
  {
    this.mMaxWordsInLiveRoom = paramInt;
  }

  public void setMobileAlert(boolean paramBoolean)
  {
    if (this.mContext == null)
      return;
    this.mMobileAlert = paramBoolean;
    SharedCfg.getInstance().setMobileAlert(paramBoolean);
  }

  public void setMobilePlay(boolean paramBoolean)
  {
    if (this.mContext == null)
      return;
    this.mMobilePlay = paramBoolean;
    SharedCfg.getInstance().setMobilePlayOrStop(paramBoolean);
  }

  public void setMsgSeq(long paramLong)
  {
    this.msgSeq = paramLong;
  }

  public void setNewCDN(String paramString)
  {
    if (this.mContext == null);
    while (this.mNewCDN.equalsIgnoreCase(paramString))
      return;
    this.mNewCDN = paramString;
    SharedCfg.getInstance().setNewCDN(paramString);
  }

  public void setPlayAdvertisementTime()
  {
    this.mLastPlayAdvertisement = (System.currentTimeMillis() / 1000L);
  }

  public void setPushSwitch(boolean paramBoolean)
  {
    GlobalCfg.getInstance(getContext()).setPushSwitch(paramBoolean);
  }

  public void setPushToWeiboGroup(String paramString)
  {
    String[] arrayOfString;
    if ((paramString != null) && (!paramString.equalsIgnoreCase("")) && (!paramString.equalsIgnoreCase("#")))
    {
      this.mPushToWeiboGroup = new ArrayList();
      arrayOfString = paramString.split(";;");
      if (arrayOfString != null)
        break label48;
    }
    while (true)
    {
      return;
      label48: for (int i = 0; i < arrayOfString.length; i++)
        this.mPushToWeiboGroup.add(arrayOfString[i]);
    }
  }

  public void setPushToWeiboId(String paramString)
  {
    String[] arrayOfString;
    if ((paramString != null) && (!paramString.equalsIgnoreCase("")) && (!paramString.equalsIgnoreCase("#")))
    {
      this.mPushToWeiboId = new ArrayList();
      arrayOfString = paramString.split(";;");
      if (arrayOfString != null)
        break label48;
    }
    while (true)
    {
      return;
      label48: for (int i = 0; i < arrayOfString.length; i++)
        this.mPushToWeiboId.add(arrayOfString[i]);
    }
  }

  public void setQuitAfterPlay(boolean paramBoolean)
  {
    this.mQuitAfterPlay = paramBoolean;
  }

  public void setRecommendShare(boolean paramBoolean)
  {
    this.mEnableRecShare = paramBoolean;
  }

  public void setSellApps(boolean paramBoolean)
  {
    this.mSellApps = paramBoolean;
  }

  public void setSellAppsInfo(String paramString)
  {
    this.mSellAppsInfo = paramString;
  }

  public void setSellAppsPackage(String paramString)
  {
    this.mSellAppsPackage = paramString;
    saveSellAppsPackage();
  }

  public void setShareTag(String paramString)
  {
    if (paramString != null)
      this.mShareTag = paramString;
  }

  public void setShowRecommendApp(boolean paramBoolean)
  {
    this.mShowRecommendApp = paramBoolean;
  }

  public void setStatusPage(boolean paramBoolean)
  {
    this.mStatusPage = paramBoolean;
  }

  public void setTaobaoAudioAdv(boolean paramBoolean)
  {
    this.mEnableTaobaoAudioAdv = paramBoolean;
    setEnableTBMagic(paramBoolean);
  }

  public void setTaobaoAudioAdvInterval(int paramInt)
  {
    this.mTaobaoAdvInterval = paramInt;
  }

  public void setTopHistory(boolean paramBoolean)
  {
    this.mTopHisotory = paramBoolean;
  }

  public void setUmengAlias(PushAgent paramPushAgent)
  {
    if (paramPushAgent == null)
      return;
    this.mAgent = paramPushAgent;
    Message localMessage = Message.obtain(this.mLoadHandler, 4, null);
    this.mLoadHandler.sendMessage(localMessage);
    String str = UmengRegistrar.getRegistrationId(this.mContext);
    GlobalCfg.getInstance(this.mContext).saveGeTuiClientID(str);
    QTLogger.getInstance().setGeTuiCID(str);
  }

  public void setUseIpInMedia(boolean paramBoolean)
  {
    this.mUseIpInMedia = paramBoolean;
  }

  public void setUsePlayCache(boolean paramBoolean)
  {
    this.mUsePlayCache = paramBoolean;
  }

  public void setUsedOnlyInWifi(boolean paramBoolean)
  {
    SharedCfg.getInstance().setOnlyUsedInWifi(paramBoolean);
    this.mUsedOnlyInWifi = paramBoolean;
  }

  public void setUserInfo(UserInfo paramUserInfo)
  {
    this.mUserProfile.setUserInfo(paramUserInfo);
    if ((paramUserInfo != null) && (paramUserInfo.snsInfo.sns_site != ""))
    {
      UserProfile localUserProfile = this.mUserProfile;
      String str = paramUserInfo.userKey;
      if (paramUserInfo.snsInfo.sns_site == "weibo");
      List localList;
      for (int i = 0; ; i = 1)
      {
        localUserProfile.setUserKey(str, i);
        if ((this.mUserProfile.getUserInfo() == null) || (TextUtils.isEmpty(this.mUserProfile.getUserInfo().snsInfo.sns_id)))
          break label194;
        localList = PodcasterHelper.getInstance().getAllMyPodcaster(this.mUserProfile.getUserInfo().snsInfo.sns_id);
        if (localList == null)
          break label194;
        Iterator localIterator = localList.iterator();
        while (localIterator.hasNext())
          loadPodcasterLatestInfo(((Integer)localIterator.next()).intValue(), null);
      }
      QTMSGManage.getInstance().sendStatistcsMessage("HaveFavorPodcaster", "" + localList.size());
    }
    label194: dispatchSubscribeEvent("RUIU");
    CloudCenter.getInstance().registerUser(paramUserInfo);
  }

  public void setUserStatus(int paramInt)
  {
    SharedCfg.getInstance().setChooseUser(paramInt);
    if (paramInt == 2)
    {
      if (System.currentTimeMillis() / 1000L % 2L == 0L)
      {
        ABTest.getInstance().manualSetOption(ABTestConfig.Student, "0");
        SharedCfg.getInstance().setChooseStudent(1);
      }
    }
    else
      return;
    ABTest.getInstance().manualSetOption(ABTestConfig.Student, "1");
    SharedCfg.getInstance().setChooseStudent(2);
  }

  public void setUserguideRecommend(String paramString)
  {
    this.mUserguidRecommend = paramString;
  }

  public void sethasJdAd(boolean paramBoolean)
  {
    this.mHasJdAd = paramBoolean;
  }

  public boolean showGuideFav()
  {
    return false;
  }

  public void startLocate()
  {
    if (this.mContext == null)
      return;
    DataManager.getInstance().getData("get_ip_location", this, null);
  }

  public void startMain(Context paramContext)
  {
    this.bootstrapCnt = SharedCfg.getInstance().getBootstrapMax();
    this.bootstrapCnt = (-1 + this.bootstrapCnt);
    SharedCfg.getInstance().setBootstrapMax(this.bootstrapCnt);
    loadDataAfterStart();
    getInstance().root().mPersonalCenterNode.myCollectionNode.updateChannelsInfo();
  }

  public void startNotificationInQuit()
  {
  }

  public void stopLocate()
  {
  }

  public void unRegisterNodeEventListener(String paramString, INodeEventListener paramINodeEventListener)
  {
    List localList;
    if ((paramINodeEventListener != null) && (this.mapNodeEventListeners.containsKey(paramString)))
    {
      localList = (List)this.mapNodeEventListeners.get(paramString);
      if (localList == null);
    }
    for (int i = 0; ; i++)
      if (i < localList.size())
      {
        if (localList.get(i) == paramINodeEventListener)
          localList.remove(i);
      }
      else
        return;
  }

  public void unregisterViewTime(ISubscribeEventListener paramISubscribeEventListener)
  {
    Iterator localIterator = this.viewTimeListener.iterator();
    while (localIterator.hasNext())
    {
      WeakReference localWeakReference = (WeakReference)localIterator.next();
      if ((localWeakReference.get() != null) && (localWeakReference.get() == paramISubscribeEventListener))
        this.viewTimeListener.remove(localWeakReference);
    }
  }

  public void updateViewTime(String paramString, long paramLong)
  {
    TimeBean localTimeBean = (TimeBean)this.mChannelsTiming.get(paramString);
    if (localTimeBean == null);
    while (localTimeBean.getViewTime() >= paramLong)
      return;
    if (paramLong > localTimeBean.getUpdateTime())
      paramLong = localTimeBean.getUpdateTime();
    localTimeBean.setViewTime(paramLong);
    this.mNeedWrite = true;
    dispatchViewTimeEvent();
  }

  public boolean useMobileNetwork()
  {
    int i = 1;
    int j = getNetWorkType();
    if ((j == i) || (j == -1))
      i = 0;
    while (getEnableMobileNetwork())
      return i;
    return false;
  }

  public boolean usePlayCache()
  {
    return this.mUsePlayCache;
  }

  public static enum AUDIO_QUALITY_MODE
  {
    static
    {
      LOW_QUALITY = new AUDIO_QUALITY_MODE("LOW_QUALITY", 1);
      HIGH_QUALITY = new AUDIO_QUALITY_MODE("HIGH_QUALITY", 2);
      AUDIO_QUALITY_MODE[] arrayOfAUDIO_QUALITY_MODE = new AUDIO_QUALITY_MODE[3];
      arrayOfAUDIO_QUALITY_MODE[0] = SMART;
      arrayOfAUDIO_QUALITY_MODE[1] = LOW_QUALITY;
      arrayOfAUDIO_QUALITY_MODE[2] = HIGH_QUALITY;
    }
  }

  public static enum DataExceptionStatus
  {
    static
    {
      Status304 = new DataExceptionStatus("Status304", 2);
      DataExceptionStatus[] arrayOfDataExceptionStatus = new DataExceptionStatus[3];
      arrayOfDataExceptionStatus[0] = OK;
      arrayOfDataExceptionStatus[1] = Timeout;
      arrayOfDataExceptionStatus[2] = Status304;
    }
  }

  public class DataStoreHandler extends Handler
  {
    public DataStoreHandler(Looper arg2)
    {
      super();
    }

    public void handleMessage(Message paramMessage)
    {
      if (paramMessage == null)
        return;
      switch (paramMessage.what)
      {
      default:
        return;
      case 1:
        ((VirtualNode)paramMessage.obj).updateVirtualCategoryToDB();
        return;
      case 2:
        MediaCenter.getInstance().updateMediaCenter();
        return;
      case 3:
        ((CategoryNode)paramMessage.obj).updateAttributesToDB();
        return;
      case 4:
        ((RecommendCategoryNode)paramMessage.obj).updateToDB();
        return;
      case 5:
        ((ProgramScheduleList)paramMessage.obj).updateToDB();
        return;
      case 6:
        ((BillboardNode)paramMessage.obj).updateToDB(1);
        return;
      case 7:
        ((BillboardNode)paramMessage.obj).updateToDB(2);
        return;
      case 9:
        String str = (String)paramMessage.obj;
        ChannelHelper.getInstance().updateChannel(str);
        return;
      case 8:
        ((LiveNode)paramMessage.obj).updateLiveCategoryToDB();
        return;
      case 10:
      }
      PlayListManager.getInstance().updateToDB(true);
    }
  }

  private class DispatchHandler extends Handler
  {
    public DispatchHandler(Looper arg2)
    {
      super();
    }

    public void handleMessage(Message paramMessage)
    {
      HashMap localHashMap = (HashMap)paramMessage.obj;
      InfoManager.ISubscribeEventListener localISubscribeEventListener = null;
      if (localHashMap != null)
        localISubscribeEventListener = (InfoManager.ISubscribeEventListener)localHashMap.get("listener");
      String str = (String)localHashMap.get("type");
      if ((str != null) && (localISubscribeEventListener != null))
        localISubscribeEventListener.onNotification(str);
      while (str == null)
        return;
      InfoManager.this.dispatchSubscribeEvent(str);
    }
  }

  public static abstract interface INodeEventListener
  {
    public static final String ADD_ACTIVITY_LIST = "AACTL";
    public static final String ADD_ADVERTISEMENT_INFO = "ADD_ADVERTISEMENT_INFO";
    public static final String ADD_ALBUM_LIST = "AAL";
    public static final String ADD_BILLBOARD_CHANNELS = "ABCS";
    public static final String ADD_BILLBOARD_PROGRAMS = "ABPS";
    public static final String ADD_CATEGORY = "ACA";
    public static final String ADD_CATEGORY_ALL_CHANNELS = "ADD_CATEGORY_ALL_CHANNELS";
    public static final String ADD_CATEGORY_ATTR = "ADD_CATEGORY_ATTR";
    public static final String ADD_CATEGORY_LIST = "ACAL";
    public static final String ADD_CHANNEL_LIST = "ACL";
    public static final String ADD_CHECK_IN_STATUS = "ACIS";
    public static final String ADD_CURRENT_PLAYING_PROGRAMS = "ACPP";
    public static final String ADD_CURRENT_PROGRAM_TOPICS = "ACPT";
    public static final String ADD_FREQ_CHANNELS = "AFC";
    public static final String ADD_GUIDE_CATEGORY = "AGC";
    public static final String ADD_LINK_INFO = "ALI";
    public static final String ADD_LIVE_CHANNELS_BYATTR = "ADD_LIVE_CHANNELS_BYATTR";
    public static final String ADD_LIVE_CHANNEL_INFO = "ADD_LIVE_CHANNEL_INFO";
    public static final String ADD_LIVE_PROGRAMS_SCHEDULE = "ADD_LIVE_PROGRAMS_SCHEDULE";
    public static final String ADD_MORE_VIRTUAL_CHANNEL_LIST = "AMVCL";
    public static final String ADD_ONDEMAND_CHANNEL = "AOC";
    public static final String ADD_ONDEMAND_PROGRAMS_LIST = "ADPL";
    public static final String ADD_PODCASTER_BASE = "ADD_PODCASTER_BASE";
    public static final String ADD_PODCASTER_CHANNELS = "ADD_PODCASTER_CHANNELS";
    public static final String ADD_PODCASTER_DETAIL = "ADD_PODCASTER_DETAIL";
    public static final String ADD_PODCASTER_LATEST = "ADD_PODCASTER_LATEST";
    public static final String ADD_RADIO_CHANNEL_PROGRAMS_SCHEDULE = "ARCPS";
    public static final String ADD_RADIO_INFO = "ARADIO";
    public static final String ADD_RECOMMEND_AMUSEMENT_LIST = "ARAL";
    public static final String ADD_RECOMMEND_BROADCASTER_LIST = "ARBL";
    public static final String ADD_RECOMMEND_BUSINESS_LIST = "ARBUL";
    public static final String ADD_RECOMMEND_CATEGORY_V2 = "ARCV2";
    public static final String ADD_RECOMMEND_CATEGORY_V2_BANNER = "ARCV2B";
    public static final String ADD_RECOMMEND_CHANNEL_LIST = "ARCL";
    public static final String ADD_RECOMMEND_EDUCATION_LIST = "AREL";
    public static final String ADD_RECOMMEND_FEEL_LIST = "ARFL";
    public static final String ADD_RECOMMEND_LIFE_LIST = "ARLL";
    public static final String ADD_RECOMMEND_MUSIC_LIST = "ARML";
    public static final String ADD_RECOMMEND_NEWS_LIST = "ARNEL";
    public static final String ADD_RECOMMEND_NOVEL_LIST = "ARNL";
    public static final String ADD_RECOMMEND_OTHER_LIST = "AROL";
    public static final String ADD_RECOMMEND_PODCAST_LIST = "ARPL";
    public static final String ADD_RECOMMEND_TECHNOLOGY_LIST = "ARTL";
    public static final String ADD_RELOAD_VIRTUAL_PROGRAMS_SCHEDULE = "ADD_RELOAD_VIRTUAL_PROGRAMS_SCHEDULE";
    public static final String ADD_RINGTONE_LIST = "ARTNL";
    public static final String ADD_SHARE_INFO_NODE = "ASIN";
    public static final String ADD_SPECIAL_TOPIC = "ADD_SPECIAL_TOPIC";
    public static final String ADD_SPECIAL_TOPIC_CHANNELS = "ADD_SPECIAL_TOPIC_CHANNELS";
    public static final String ADD_SUB_CATEGORY = "ASC";
    public static final String ADD_SUB_CATEGORY_LIST = "ASCL";
    public static final String ADD_VIRTUAL_CATEGORY_LIST = "AVCAL";
    public static final String ADD_VIRTUAL_CHANNELS_BYATTR = "ADD_VIRTUAL_CHANNELS_BYATTR";
    public static final String ADD_VIRTUAL_CHANNEL_INFO = "ADD_VIRTUAL_CHANNEL_INFO";
    public static final String ADD_VIRTUAL_CHANNEL_LIST = "AVCL";
    public static final String ADD_VIRTUAL_DIMENTION_LIST = "AVDIL";
    public static final String ADD_VIRTUAL_PROGRAMS_SCHEDULE = "ADD_VIRTUAL_PROGRAMS_SCHEDULE";
    public static final String ADD_VIRTUAL_PROGRAM_INFO = "AVPI";
    public static final String Add_recommend_for_category = "Add_recommend_for_category";

    public abstract void onNodeUpdated(Object paramObject, String paramString);

    public abstract void onNodeUpdated(Object paramObject, Map<String, String> paramMap, String paramString);
  }

  public static abstract interface ISubscribeEventListener
  {
    public static final String RECV_ACTIVITY_LIST = "RACTL";
    public static final String RECV_ADVERTISEMENTS_INFO = "RADI";
    public static final String RECV_ALBUM_LIST = "RAL";
    public static final String RECV_ATTRIBUTES = "RECV_ATTRIBUTES";
    public static final String RECV_BILLBOARD_CHANNELS = "RBCS";
    public static final String RECV_BILLBOARD_PROGRAMS = "RBPS";
    public static final String RECV_CHECK_IN_STATUS = "RCIS";
    public static final String RECV_CONTENT_CATEGORY = "RCC";
    public static final String RECV_CURRENT_PLAYING_PROGRAMS_LIST = "RCPPL";
    public static final String RECV_CURRENT_PROGRAM_TOPICS = "RCPT";
    public static final String RECV_FRONTPAGE_BANNER_LOADED = "RFBL";
    public static final String RECV_FRONTPAGE_LOADED = "RFLO";
    public static final String RECV_GUIDE_CATEGORY_LIST = "RGCL";
    public static final String RECV_LINK_INFO = "RLI";
    public static final String RECV_LIVE_CATEGORY = "RLC";
    public static final String RECV_LIVE_CATEGORY_V2 = "RLCV2";
    public static final String RECV_LIVE_CHANNELS_BYATTR = "RECV_LIVE_CHANNELS_BYATTR";
    public static final String RECV_LIVE_CHANNEL_LIST = "RLCL";
    public static final String RECV_LOCAL_CATEGORY = "RECV_LOCAL_CATEGORY";
    public static final String RECV_LOCAL_RECOMMEND_INFO = "RECV_LOCAL_RECOMMEND_INFO";
    public static final String RECV_NOVEL_CATEGORY = "RNC";
    public static final String RECV_ONDEMAND_PROGRAM_LIST = "ROPL";
    public static final String RECV_PODCASTER_BASEINFO = "RECV_PODCASTER_BASEINFO";
    public static final String RECV_PODCASTER_CHANNELS = "RECV_PODCASTER_CHANNELS";
    public static final String RECV_PODCASTER_DETAILINFO = "RECV_PODCASTER_DETAILINFO";
    public static final String RECV_PODCASTER_LATEST = "RECV_PODCASTER_LATEST";
    public static final String RECV_PODCAST_CATEGORY = "RPC";
    public static final String RECV_PROGRAMS_SCHEDULE = "RPS";
    public static final String RECV_RECOMMEND_CATEGORY_V2 = "RRCV";
    public static final String RECV_RECOMMEND_CATEGORY_V2_BANNER = "PRCVB";
    public static final String RECV_RECOMMEND_INFO = "RECV_RECOMMEND_INFO";
    public static final String RECV_RECOMMEND_PLAYING_PROGRAMS_INFO = "RRPPI";
    public static final String RECV_RELOAD_PROGRAMS_SCHEDULE = "RECV_RELOAD_PROGRAMS_SCHEDULE";
    public static final String RECV_RINGTONE_LIST = "RRTNL";
    public static final String RECV_SEARCH_HOT_KEYWORDS = "RSHK";
    public static final String RECV_SEARCH_RESULT_LIST = "RSRL";
    public static final String RECV_SEARCH_SUGGESTIONS = "RSSUGG";
    public static final String RECV_SHARE_INFO_NODE = "RSIN";
    public static final String RECV_SPECIAL_TOPIC_CHANNELS = "RECV_SPECIAL_TOPIC_CHANNELS";
    public static final String RECV_SUB_CATEGORY = "RSC";
    public static final String RECV_USER_INFO_UPDATE = "RUIU";
    public static final String RECV_VIEWTIME_UPDATED = "viewTimeUpdated";
    public static final String RECV_VIRTUAL_CATEGORY_LIST = "RVCAL";
    public static final String RECV_VIRTUAL_CHANNELS_BYATTR = "RECV_VIRTUAL_CHANNELS_BYATTR";
    public static final String RECV_VIRTUAL_CHANNEL_LIST = "RVCL";
    public static final String RECV_VIRTUAL_DIMENTION_LIST = "RVDL";
    public static final String RECV_VIRTUAL_PROGRAM_INFO = "RVPI";
    public static final String RECV_WSQ_NEW = "WSQNEW";
    public static final String SUBSCRIBE_ALL_EVENTS = "SAE";

    public abstract void onNotification(String paramString);

    public abstract void onRecvDataException(String paramString, InfoManager.DataExceptionStatus paramDataExceptionStatus);
  }

  public class LoadDataHandler extends Handler
  {
    public LoadDataHandler(Looper arg2)
    {
      super();
    }

    public void handleMessage(Message paramMessage)
    {
      if (paramMessage == null);
      CategoryNode localCategoryNode;
      do
      {
        int j;
        RecommendCategoryNode localRecommendCategoryNode;
        do
        {
          return;
          switch (paramMessage.what)
          {
          default:
            return;
          case 1:
            InfoManager.this.root().mContentCategory.mVirtualNode.restoreChildFromDB();
            return;
          case 2:
            j = ((Integer)paramMessage.obj).intValue();
            localRecommendCategoryNode = InfoManager.this.root().getRecommendCategoryNode(j);
          case 3:
          case 4:
          }
        }
        while ((localRecommendCategoryNode == null) || (localRecommendCategoryNode.hasUpdate));
        localRecommendCategoryNode.restoreFromDB();
        InfoManager.this.root().mapRecommendCategory.put(Integer.valueOf(j), localRecommendCategoryNode);
        InfoManager.this.dispatchSubscribeEvent("RECV_RECOMMEND_INFO");
        return;
        int i = ((Integer)paramMessage.obj).intValue();
        localCategoryNode = InfoManager.this.root().mContentCategory.mVirtualNode.getCategoryNode(i);
      }
      while (localCategoryNode == null);
      localCategoryNode.restoreAttributesFromDB();
      return;
      InfoManager.this._setUmengAlias();
    }
  }

  public abstract class SubscribeEventListener
    implements InfoManager.ISubscribeEventListener
  {
    public SubscribeEventListener()
    {
    }

    public void onRecvDataException(String paramString, InfoManager.DataExceptionStatus paramDataExceptionStatus)
    {
    }
  }
}

/* Location:           /Users/zhangxun-xy/Downloads/qingting2/classes_dex2jar.jar
 * Qualified Name:     fm.qingting.qtradio.model.InfoManager
 * JD-Core Version:    0.6.2
 */